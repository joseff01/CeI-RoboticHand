Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTARY
    ELSE

Grammar

Rule 0     S' -> algorithm
Rule 1     algorithm -> algorithm algorithm_line
Rule 2     algorithm -> empty
Rule 3     algorithm_line -> if_else
Rule 4     algorithm_line -> expression PyC
Rule 5     algorithm_line -> var_assign PyC
Rule 6     algorithm_line -> for_loop
Rule 7     algorithm_line -> while_loop
Rule 8     operator -> PLUS
Rule 9     operator -> MINUS
Rule 10    operator -> INT_DIV
Rule 11    operator -> DIVIDE
Rule 12    operator -> EXP
Rule 13    operator -> MULTIPLY
Rule 14    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 15    bool_operator -> EQUALS_EQUALS
Rule 16    bool_operator -> DISTINCT
Rule 17    bool_operator -> LESS_EQUAL
Rule 18    bool_operator -> MORE_EQUAL
Rule 19    bool_operator -> MORE_THAN
Rule 20    bool_operator -> LESS_THAN
Rule 21    expression -> expression bool_operator expression
Rule 22    var_assign -> LET VARIABLE EQUALS expression
Rule 23    for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2
Rule 24    for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2
Rule 25    for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2
Rule 26    for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
Rule 27    if_else -> IF expression SB1 statement SB2
Rule 28    statement -> statement statement_line
Rule 29    statement -> empty
Rule 30    statement_line -> if_else
Rule 31    statement_line -> expression PyC
Rule 32    statement_line -> var_assign PyC
Rule 33    statement_line -> for_loop PyC
Rule 34    statement_line -> while_loop PyC
Rule 35    while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2
Rule 36    empty -> <empty>
Rule 37    expression -> INT
Rule 38    expression -> BOOLEAN
Rule 39    expression -> VARIABLE

Terminals, with rules where they appear

BOOLEAN              : 38
CLOSE_P              : 14 35
COMMA                : 14 14
COMMENTARY           : 
DISTINCT             : 16
DIVIDE               : 11
ELSE                 : 
EQUALS               : 22
EQUALS_EQUALS        : 15
EXP                  : 12
FOR                  : 23 24 25 26
IF                   : 27
IN                   : 23 24 25 26
INT                  : 23 23 23 24 24 25 25 25 26 26 37
INT_DIV              : 10
LESS_EQUAL           : 17
LESS_THAN            : 20
LET                  : 22
MINUS                : 9
MORE_EQUAL           : 18
MORE_THAN            : 19
MULTIPLY             : 13
OPEN_P               : 14 35
OPERA                : 14
PLUS                 : 8
PyC                  : 4 5 31 32 33 34
SB1                  : 23 24 25 26 27 35
SB2                  : 23 24 25 26 27 35
VARIABLE             : 22 24 26 39
WHILE                : 35
dDOT                 : 23 24
dDOT_E               : 25 26
error                : 

Nonterminals, with rules where they appear

algorithm            : 1 0
algorithm_line       : 1
bool_operator        : 21
empty                : 2 29
expression           : 4 14 14 21 21 22 27 31 35
for_loop             : 6 33
if_else              : 3 30
operator             : 14
statement            : 23 24 25 26 27 28 35
statement_line       : 28
var_assign           : 5 32
while_loop           : 7 34

Parsing method: LALR

state 0

    (0) S' -> . algorithm
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (36) empty -> .

    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)
    $end            reduce using rule 36 (empty -> .)

    algorithm                      shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> algorithm .
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop
    (7) algorithm_line -> . while_loop
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 2

    (2) algorithm -> empty .

    IF              reduce using rule 2 (algorithm -> empty .)
    OPERA           reduce using rule 2 (algorithm -> empty .)
    INT             reduce using rule 2 (algorithm -> empty .)
    BOOLEAN         reduce using rule 2 (algorithm -> empty .)
    VARIABLE        reduce using rule 2 (algorithm -> empty .)
    LET             reduce using rule 2 (algorithm -> empty .)
    FOR             reduce using rule 2 (algorithm -> empty .)
    WHILE           reduce using rule 2 (algorithm -> empty .)
    $end            reduce using rule 2 (algorithm -> empty .)


state 3

    (1) algorithm -> algorithm algorithm_line .

    IF              reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    OPERA           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    INT             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    BOOLEAN         reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    VARIABLE        reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    LET             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    FOR             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    WHILE           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    $end            reduce using rule 1 (algorithm -> algorithm algorithm_line .)


state 4

    (3) algorithm_line -> if_else .

    IF              reduce using rule 3 (algorithm_line -> if_else .)
    OPERA           reduce using rule 3 (algorithm_line -> if_else .)
    INT             reduce using rule 3 (algorithm_line -> if_else .)
    BOOLEAN         reduce using rule 3 (algorithm_line -> if_else .)
    VARIABLE        reduce using rule 3 (algorithm_line -> if_else .)
    LET             reduce using rule 3 (algorithm_line -> if_else .)
    FOR             reduce using rule 3 (algorithm_line -> if_else .)
    WHILE           reduce using rule 3 (algorithm_line -> if_else .)
    $end            reduce using rule 3 (algorithm_line -> if_else .)


state 5

    (4) algorithm_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 17
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 6

    (5) algorithm_line -> var_assign . PyC

    PyC             shift and go to state 25


state 7

    (6) algorithm_line -> for_loop .

    IF              reduce using rule 6 (algorithm_line -> for_loop .)
    OPERA           reduce using rule 6 (algorithm_line -> for_loop .)
    INT             reduce using rule 6 (algorithm_line -> for_loop .)
    BOOLEAN         reduce using rule 6 (algorithm_line -> for_loop .)
    VARIABLE        reduce using rule 6 (algorithm_line -> for_loop .)
    LET             reduce using rule 6 (algorithm_line -> for_loop .)
    FOR             reduce using rule 6 (algorithm_line -> for_loop .)
    WHILE           reduce using rule 6 (algorithm_line -> for_loop .)
    $end            reduce using rule 6 (algorithm_line -> for_loop .)


state 8

    (7) algorithm_line -> while_loop .

    IF              reduce using rule 7 (algorithm_line -> while_loop .)
    OPERA           reduce using rule 7 (algorithm_line -> while_loop .)
    INT             reduce using rule 7 (algorithm_line -> while_loop .)
    BOOLEAN         reduce using rule 7 (algorithm_line -> while_loop .)
    VARIABLE        reduce using rule 7 (algorithm_line -> while_loop .)
    LET             reduce using rule 7 (algorithm_line -> while_loop .)
    FOR             reduce using rule 7 (algorithm_line -> while_loop .)
    WHILE           reduce using rule 7 (algorithm_line -> while_loop .)
    $end            reduce using rule 7 (algorithm_line -> while_loop .)


state 9

    (27) if_else -> IF . expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 26

state 10

    (14) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 27


state 11

    (37) expression -> INT .

    PyC             reduce using rule 37 (expression -> INT .)
    EQUALS_EQUALS   reduce using rule 37 (expression -> INT .)
    DISTINCT        reduce using rule 37 (expression -> INT .)
    LESS_EQUAL      reduce using rule 37 (expression -> INT .)
    MORE_EQUAL      reduce using rule 37 (expression -> INT .)
    MORE_THAN       reduce using rule 37 (expression -> INT .)
    LESS_THAN       reduce using rule 37 (expression -> INT .)
    SB1             reduce using rule 37 (expression -> INT .)
    CLOSE_P         reduce using rule 37 (expression -> INT .)
    COMMA           reduce using rule 37 (expression -> INT .)


state 12

    (38) expression -> BOOLEAN .

    PyC             reduce using rule 38 (expression -> BOOLEAN .)
    EQUALS_EQUALS   reduce using rule 38 (expression -> BOOLEAN .)
    DISTINCT        reduce using rule 38 (expression -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 38 (expression -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 38 (expression -> BOOLEAN .)
    MORE_THAN       reduce using rule 38 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 38 (expression -> BOOLEAN .)
    SB1             reduce using rule 38 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 38 (expression -> BOOLEAN .)
    COMMA           reduce using rule 38 (expression -> BOOLEAN .)


state 13

    (39) expression -> VARIABLE .

    PyC             reduce using rule 39 (expression -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 39 (expression -> VARIABLE .)
    DISTINCT        reduce using rule 39 (expression -> VARIABLE .)
    LESS_EQUAL      reduce using rule 39 (expression -> VARIABLE .)
    MORE_EQUAL      reduce using rule 39 (expression -> VARIABLE .)
    MORE_THAN       reduce using rule 39 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 39 (expression -> VARIABLE .)
    SB1             reduce using rule 39 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 39 (expression -> VARIABLE .)
    COMMA           reduce using rule 39 (expression -> VARIABLE .)


state 14

    (22) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 28


state 15

    (23) for_loop -> FOR . INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> FOR . VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> FOR . INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> FOR . VARIABLE IN INT dDOT_E INT SB1 statement SB2

    INT             shift and go to state 29
    VARIABLE        shift and go to state 30


state 16

    (35) while_loop -> WHILE . OPEN_P expression CLOSE_P SB1 statement SB2

    OPEN_P          shift and go to state 31


state 17

    (4) algorithm_line -> expression PyC .

    IF              reduce using rule 4 (algorithm_line -> expression PyC .)
    OPERA           reduce using rule 4 (algorithm_line -> expression PyC .)
    INT             reduce using rule 4 (algorithm_line -> expression PyC .)
    BOOLEAN         reduce using rule 4 (algorithm_line -> expression PyC .)
    VARIABLE        reduce using rule 4 (algorithm_line -> expression PyC .)
    LET             reduce using rule 4 (algorithm_line -> expression PyC .)
    FOR             reduce using rule 4 (algorithm_line -> expression PyC .)
    WHILE           reduce using rule 4 (algorithm_line -> expression PyC .)
    $end            reduce using rule 4 (algorithm_line -> expression PyC .)


state 18

    (21) expression -> expression bool_operator . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 32

state 19

    (15) bool_operator -> EQUALS_EQUALS .

    OPERA           reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    INT             reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    BOOLEAN         reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)


state 20

    (16) bool_operator -> DISTINCT .

    OPERA           reduce using rule 16 (bool_operator -> DISTINCT .)
    INT             reduce using rule 16 (bool_operator -> DISTINCT .)
    BOOLEAN         reduce using rule 16 (bool_operator -> DISTINCT .)
    VARIABLE        reduce using rule 16 (bool_operator -> DISTINCT .)


state 21

    (17) bool_operator -> LESS_EQUAL .

    OPERA           reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    INT             reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    BOOLEAN         reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 17 (bool_operator -> LESS_EQUAL .)


state 22

    (18) bool_operator -> MORE_EQUAL .

    OPERA           reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    INT             reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    BOOLEAN         reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    VARIABLE        reduce using rule 18 (bool_operator -> MORE_EQUAL .)


state 23

    (19) bool_operator -> MORE_THAN .

    OPERA           reduce using rule 19 (bool_operator -> MORE_THAN .)
    INT             reduce using rule 19 (bool_operator -> MORE_THAN .)
    BOOLEAN         reduce using rule 19 (bool_operator -> MORE_THAN .)
    VARIABLE        reduce using rule 19 (bool_operator -> MORE_THAN .)


state 24

    (20) bool_operator -> LESS_THAN .

    OPERA           reduce using rule 20 (bool_operator -> LESS_THAN .)
    INT             reduce using rule 20 (bool_operator -> LESS_THAN .)
    BOOLEAN         reduce using rule 20 (bool_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 20 (bool_operator -> LESS_THAN .)


state 25

    (5) algorithm_line -> var_assign PyC .

    IF              reduce using rule 5 (algorithm_line -> var_assign PyC .)
    OPERA           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    INT             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 5 (algorithm_line -> var_assign PyC .)
    VARIABLE        reduce using rule 5 (algorithm_line -> var_assign PyC .)
    LET             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    FOR             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    WHILE           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    $end            reduce using rule 5 (algorithm_line -> var_assign PyC .)


state 26

    (27) if_else -> IF expression . SB1 statement SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB1             shift and go to state 33
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 27

    (14) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (8) operator -> . PLUS
    (9) operator -> . MINUS
    (10) operator -> . INT_DIV
    (11) operator -> . DIVIDE
    (12) operator -> . EXP
    (13) operator -> . MULTIPLY

    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    INT_DIV         shift and go to state 37
    DIVIDE          shift and go to state 38
    EXP             shift and go to state 39
    MULTIPLY        shift and go to state 40

    operator                       shift and go to state 34

state 28

    (22) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 41


state 29

    (23) for_loop -> FOR INT . IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> FOR INT . IN INT dDOT_E INT SB1 statement SB2

    IN              shift and go to state 42


state 30

    (24) for_loop -> FOR VARIABLE . IN INT dDOT INT SB1 statement SB2
    (26) for_loop -> FOR VARIABLE . IN INT dDOT_E INT SB1 statement SB2

    IN              shift and go to state 43


state 31

    (35) while_loop -> WHILE OPEN_P . expression CLOSE_P SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 44

state 32

    (21) expression -> expression bool_operator expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for DISTINCT resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    PyC             reduce using rule 21 (expression -> expression bool_operator expression .)
    SB1             reduce using rule 21 (expression -> expression bool_operator expression .)
    CLOSE_P         reduce using rule 21 (expression -> expression bool_operator expression .)
    COMMA           reduce using rule 21 (expression -> expression bool_operator expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

  ! EQUALS_EQUALS   [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! DISTINCT        [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]

    bool_operator                  shift and go to state 18

state 33

    (27) if_else -> IF expression SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 45
    empty                          shift and go to state 46

state 34

    (14) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 47


state 35

    (8) operator -> PLUS .

    COMMA           reduce using rule 8 (operator -> PLUS .)


state 36

    (9) operator -> MINUS .

    COMMA           reduce using rule 9 (operator -> MINUS .)


state 37

    (10) operator -> INT_DIV .

    COMMA           reduce using rule 10 (operator -> INT_DIV .)


state 38

    (11) operator -> DIVIDE .

    COMMA           reduce using rule 11 (operator -> DIVIDE .)


state 39

    (12) operator -> EXP .

    COMMA           reduce using rule 12 (operator -> EXP .)


state 40

    (13) operator -> MULTIPLY .

    COMMA           reduce using rule 13 (operator -> MULTIPLY .)


state 41

    (22) var_assign -> LET VARIABLE EQUALS . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 48

state 42

    (23) for_loop -> FOR INT IN . INT dDOT INT SB1 statement SB2
    (25) for_loop -> FOR INT IN . INT dDOT_E INT SB1 statement SB2

    INT             shift and go to state 49


state 43

    (24) for_loop -> FOR VARIABLE IN . INT dDOT INT SB1 statement SB2
    (26) for_loop -> FOR VARIABLE IN . INT dDOT_E INT SB1 statement SB2

    INT             shift and go to state 50


state 44

    (35) while_loop -> WHILE OPEN_P expression . CLOSE_P SB1 statement SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    CLOSE_P         shift and go to state 51
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 45

    (27) if_else -> IF expression SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 53
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    expression                     shift and go to state 52
    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 46

    (29) statement -> empty .

    SB2             reduce using rule 29 (statement -> empty .)
    IF              reduce using rule 29 (statement -> empty .)
    OPERA           reduce using rule 29 (statement -> empty .)
    INT             reduce using rule 29 (statement -> empty .)
    BOOLEAN         reduce using rule 29 (statement -> empty .)
    VARIABLE        reduce using rule 29 (statement -> empty .)
    LET             reduce using rule 29 (statement -> empty .)
    FOR             reduce using rule 29 (statement -> empty .)
    WHILE           reduce using rule 29 (statement -> empty .)


state 47

    (14) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 59

state 48

    (22) var_assign -> LET VARIABLE EQUALS expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             reduce using rule 22 (var_assign -> LET VARIABLE EQUALS expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 49

    (23) for_loop -> FOR INT IN INT . dDOT INT SB1 statement SB2
    (25) for_loop -> FOR INT IN INT . dDOT_E INT SB1 statement SB2

    dDOT            shift and go to state 60
    dDOT_E          shift and go to state 61


state 50

    (24) for_loop -> FOR VARIABLE IN INT . dDOT INT SB1 statement SB2
    (26) for_loop -> FOR VARIABLE IN INT . dDOT_E INT SB1 statement SB2

    dDOT            shift and go to state 62
    dDOT_E          shift and go to state 63


state 51

    (35) while_loop -> WHILE OPEN_P expression CLOSE_P . SB1 statement SB2

    SB1             shift and go to state 64


state 52

    (31) statement_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 65
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 53

    (27) if_else -> IF expression SB1 statement SB2 .

    IF              reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    OPERA           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    INT             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    BOOLEAN         reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    VARIABLE        reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    LET             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    FOR             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    WHILE           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    $end            reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    SB2             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)


state 54

    (28) statement -> statement statement_line .

    SB2             reduce using rule 28 (statement -> statement statement_line .)
    IF              reduce using rule 28 (statement -> statement statement_line .)
    OPERA           reduce using rule 28 (statement -> statement statement_line .)
    INT             reduce using rule 28 (statement -> statement statement_line .)
    BOOLEAN         reduce using rule 28 (statement -> statement statement_line .)
    VARIABLE        reduce using rule 28 (statement -> statement statement_line .)
    LET             reduce using rule 28 (statement -> statement statement_line .)
    FOR             reduce using rule 28 (statement -> statement statement_line .)
    WHILE           reduce using rule 28 (statement -> statement statement_line .)


state 55

    (30) statement_line -> if_else .

    SB2             reduce using rule 30 (statement_line -> if_else .)
    IF              reduce using rule 30 (statement_line -> if_else .)
    OPERA           reduce using rule 30 (statement_line -> if_else .)
    INT             reduce using rule 30 (statement_line -> if_else .)
    BOOLEAN         reduce using rule 30 (statement_line -> if_else .)
    VARIABLE        reduce using rule 30 (statement_line -> if_else .)
    LET             reduce using rule 30 (statement_line -> if_else .)
    FOR             reduce using rule 30 (statement_line -> if_else .)
    WHILE           reduce using rule 30 (statement_line -> if_else .)


state 56

    (32) statement_line -> var_assign . PyC

    PyC             shift and go to state 66


state 57

    (33) statement_line -> for_loop . PyC

    PyC             shift and go to state 67


state 58

    (34) statement_line -> while_loop . PyC

    PyC             shift and go to state 68


state 59

    (14) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    COMMA           shift and go to state 69
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 60

    (23) for_loop -> FOR INT IN INT dDOT . INT SB1 statement SB2

    INT             shift and go to state 70


state 61

    (25) for_loop -> FOR INT IN INT dDOT_E . INT SB1 statement SB2

    INT             shift and go to state 71


state 62

    (24) for_loop -> FOR VARIABLE IN INT dDOT . INT SB1 statement SB2

    INT             shift and go to state 72


state 63

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E . INT SB1 statement SB2

    INT             shift and go to state 73


state 64

    (35) while_loop -> WHILE OPEN_P expression CLOSE_P SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 74
    empty                          shift and go to state 46

state 65

    (31) statement_line -> expression PyC .

    SB2             reduce using rule 31 (statement_line -> expression PyC .)
    IF              reduce using rule 31 (statement_line -> expression PyC .)
    OPERA           reduce using rule 31 (statement_line -> expression PyC .)
    INT             reduce using rule 31 (statement_line -> expression PyC .)
    BOOLEAN         reduce using rule 31 (statement_line -> expression PyC .)
    VARIABLE        reduce using rule 31 (statement_line -> expression PyC .)
    LET             reduce using rule 31 (statement_line -> expression PyC .)
    FOR             reduce using rule 31 (statement_line -> expression PyC .)
    WHILE           reduce using rule 31 (statement_line -> expression PyC .)


state 66

    (32) statement_line -> var_assign PyC .

    SB2             reduce using rule 32 (statement_line -> var_assign PyC .)
    IF              reduce using rule 32 (statement_line -> var_assign PyC .)
    OPERA           reduce using rule 32 (statement_line -> var_assign PyC .)
    INT             reduce using rule 32 (statement_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 32 (statement_line -> var_assign PyC .)
    VARIABLE        reduce using rule 32 (statement_line -> var_assign PyC .)
    LET             reduce using rule 32 (statement_line -> var_assign PyC .)
    FOR             reduce using rule 32 (statement_line -> var_assign PyC .)
    WHILE           reduce using rule 32 (statement_line -> var_assign PyC .)


state 67

    (33) statement_line -> for_loop PyC .

    SB2             reduce using rule 33 (statement_line -> for_loop PyC .)
    IF              reduce using rule 33 (statement_line -> for_loop PyC .)
    OPERA           reduce using rule 33 (statement_line -> for_loop PyC .)
    INT             reduce using rule 33 (statement_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 33 (statement_line -> for_loop PyC .)
    VARIABLE        reduce using rule 33 (statement_line -> for_loop PyC .)
    LET             reduce using rule 33 (statement_line -> for_loop PyC .)
    FOR             reduce using rule 33 (statement_line -> for_loop PyC .)
    WHILE           reduce using rule 33 (statement_line -> for_loop PyC .)


state 68

    (34) statement_line -> while_loop PyC .

    SB2             reduce using rule 34 (statement_line -> while_loop PyC .)
    IF              reduce using rule 34 (statement_line -> while_loop PyC .)
    OPERA           reduce using rule 34 (statement_line -> while_loop PyC .)
    INT             reduce using rule 34 (statement_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 34 (statement_line -> while_loop PyC .)
    VARIABLE        reduce using rule 34 (statement_line -> while_loop PyC .)
    LET             reduce using rule 34 (statement_line -> while_loop PyC .)
    FOR             reduce using rule 34 (statement_line -> while_loop PyC .)
    WHILE           reduce using rule 34 (statement_line -> while_loop PyC .)


state 69

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 75

state 70

    (23) for_loop -> FOR INT IN INT dDOT INT . SB1 statement SB2

    SB1             shift and go to state 76


state 71

    (25) for_loop -> FOR INT IN INT dDOT_E INT . SB1 statement SB2

    SB1             shift and go to state 77


state 72

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT . SB1 statement SB2

    SB1             shift and go to state 78


state 73

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT . SB1 statement SB2

    SB1             shift and go to state 79


state 74

    (35) while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 80
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    expression                     shift and go to state 52
    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 75

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    CLOSE_P         shift and go to state 81
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 76

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 82
    empty                          shift and go to state 46

state 77

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 83
    empty                          shift and go to state 46

state 78

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 84
    empty                          shift and go to state 46

state 79

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (36) empty -> .

    SB2             reduce using rule 36 (empty -> .)
    IF              reduce using rule 36 (empty -> .)
    OPERA           reduce using rule 36 (empty -> .)
    INT             reduce using rule 36 (empty -> .)
    BOOLEAN         reduce using rule 36 (empty -> .)
    VARIABLE        reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    FOR             reduce using rule 36 (empty -> .)
    WHILE           reduce using rule 36 (empty -> .)

    statement                      shift and go to state 85
    empty                          shift and go to state 46

state 80

    (35) while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .

    IF              reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    OPERA           reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    INT             reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    BOOLEAN         reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    VARIABLE        reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    LET             reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    FOR             reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    WHILE           reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    $end            reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)
    PyC             reduce using rule 35 (while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2 .)


state 81

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    EQUALS_EQUALS   reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    DISTINCT        reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB1             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)


state 82

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 86
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    expression                     shift and go to state 52
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 83

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 87
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    expression                     shift and go to state 52
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 84

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 88
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    expression                     shift and go to state 52
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 85

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (37) expression -> . INT
    (38) expression -> . BOOLEAN
    (39) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 statement SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 statement SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 statement SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2
    (35) while_loop -> . WHILE OPEN_P expression CLOSE_P SB1 statement SB2

    SB2             shift and go to state 89
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    statement_line                 shift and go to state 54
    if_else                        shift and go to state 55
    expression                     shift and go to state 52
    var_assign                     shift and go to state 56
    for_loop                       shift and go to state 57
    while_loop                     shift and go to state 58

state 86

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .

    IF              reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    OPERA           reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    INT             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    BOOLEAN         reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    VARIABLE        reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    LET             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    FOR             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    WHILE           reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    $end            reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)
    PyC             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2 .)


state 87

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .

    IF              reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    OPERA           reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    INT             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    BOOLEAN         reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    VARIABLE        reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    LET             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    FOR             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    WHILE           reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    $end            reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)
    PyC             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2 .)


state 88

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .

    IF              reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    OPERA           reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    INT             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    BOOLEAN         reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    VARIABLE        reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    LET             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    FOR             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    WHILE           reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    $end            reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)
    PyC             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2 .)


state 89

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .

    IF              reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    OPERA           reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    INT             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    BOOLEAN         reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    VARIABLE        reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    LET             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    FOR             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    WHILE           reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    $end            reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)
    PyC             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 32 resolved as shift
WARNING: shift/reduce conflict for DISTINCT in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for MORE_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for MORE_THAN in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 32 resolved as shift
