Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTARY
    ELSE

Grammar

Rule 0     S' -> algorithm
Rule 1     algorithm -> algorithm algorithm_line
Rule 2     algorithm -> empty
Rule 3     algorithm_line -> if_else
Rule 4     algorithm_line -> expression PyC
Rule 5     algorithm_line -> var_assign PyC
Rule 6     algorithm_line -> for_loop PyC
Rule 7     algorithm_line -> while_loop PyC
Rule 8     operator -> PLUS
Rule 9     operator -> MINUS
Rule 10    operator -> INT_DIV
Rule 11    operator -> DIVIDE
Rule 12    operator -> EXP
Rule 13    operator -> MULTIPLY
Rule 14    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 15    bool_operator -> EQUALS_EQUALS
Rule 16    bool_operator -> DISTINCT
Rule 17    bool_operator -> LESS_EQUAL
Rule 18    bool_operator -> MORE_EQUAL
Rule 19    bool_operator -> MORE_THAN
Rule 20    bool_operator -> LESS_THAN
Rule 21    expression -> expression bool_operator expression
Rule 22    var_assign -> LET VARIABLE EQUALS expression
Rule 23    for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2
Rule 24    for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
Rule 25    for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2
Rule 26    for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
Rule 27    if_else -> IF expression SB1 statement SB2
Rule 28    statement -> statement statement_line
Rule 29    statement -> empty
Rule 30    statement_line -> if_else
Rule 31    statement_line -> expression PyC
Rule 32    statement_line -> var_assign PyC
Rule 33    statement_line -> for_loop PyC
Rule 34    statement_line -> while_loop PyC
Rule 35    while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
Rule 36    while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
Rule 37    while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
Rule 38    while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
Rule 39    while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
Rule 40    while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 41    while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
Rule 42    while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
Rule 43    while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
Rule 44    while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 45    while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
Rule 46    while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
Rule 47    while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
Rule 48    while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
Rule 49    empty -> <empty>
Rule 50    expression -> INT
Rule 51    expression -> BOOLEAN
Rule 52    expression -> VARIABLE

Terminals, with rules where they appear

BOOLEAN              : 51
CLOSE_P              : 14 35 36 37 38 39 40 41 42 43 44 45 46 47 48
COMMA                : 14 14
COMMENTARY           : 
DISTINCT             : 16 35 36
DIVIDE               : 11
ELSE                 : 
EQUALS               : 22 47 48
EQUALS_EQUALS        : 15 45 46
EXP                  : 12
FOR                  : 23 24 25 26
IF                   : 27
IN                   : 23 24 25 26
INT                  : 23 23 23 24 24 25 25 25 26 26 35 37 39 41 43 45 47 50
INT_DIV              : 10
LESS_EQUAL           : 17 37 38
LESS_THAN            : 20 39 40
LET                  : 22
MINUS                : 9
MORE_EQUAL           : 18 41 42
MORE_THAN            : 19 43 44
MULTIPLY             : 13
OPEN_P               : 14 35 36 37 38 39 40 41 42 43 44 45 46 47 48
OPERA                : 14
PLUS                 : 8
PyC                  : 4 5 6 7 31 32 33 34
SB1                  : 23 24 25 26 27 35 36 37 38 39 40 41 42 43 44 45 46 47 48
SB2                  : 23 24 25 26 27 35 36 37 38 39 40 41 42 43 44 45 46 47 48
VARIABLE             : 22 24 26 35 36 36 37 38 38 39 40 40 41 42 42 43 44 44 45 46 46 47 48 48 52
WHILE                : 35 36 37 38 39 40 41 42 43 44 45 46 47 48
dDOT                 : 23 24
dDOT_E               : 25 26
error                : 

Nonterminals, with rules where they appear

algorithm            : 1 23 24 25 26 0
algorithm_line       : 1
bool_operator        : 21
empty                : 2 29
expression           : 4 14 14 21 21 22 27 31 35 36 37 38 39 40 41 42 43 44 45 46 47 48
for_loop             : 6 33
if_else              : 3 30
operator             : 14
statement            : 27 28
statement_line       : 28
var_assign           : 5 32
while_loop           : 7 34

Parsing method: LALR

state 0

    (0) S' -> . algorithm
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (49) empty -> .

    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)
    $end            reduce using rule 49 (empty -> .)

    algorithm                      shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> algorithm .
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 2

    (2) algorithm -> empty .

    IF              reduce using rule 2 (algorithm -> empty .)
    OPERA           reduce using rule 2 (algorithm -> empty .)
    INT             reduce using rule 2 (algorithm -> empty .)
    BOOLEAN         reduce using rule 2 (algorithm -> empty .)
    VARIABLE        reduce using rule 2 (algorithm -> empty .)
    LET             reduce using rule 2 (algorithm -> empty .)
    FOR             reduce using rule 2 (algorithm -> empty .)
    WHILE           reduce using rule 2 (algorithm -> empty .)
    $end            reduce using rule 2 (algorithm -> empty .)
    SB2             reduce using rule 2 (algorithm -> empty .)


state 3

    (1) algorithm -> algorithm algorithm_line .

    IF              reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    OPERA           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    INT             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    BOOLEAN         reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    VARIABLE        reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    LET             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    FOR             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    WHILE           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    $end            reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    SB2             reduce using rule 1 (algorithm -> algorithm algorithm_line .)


state 4

    (3) algorithm_line -> if_else .

    IF              reduce using rule 3 (algorithm_line -> if_else .)
    OPERA           reduce using rule 3 (algorithm_line -> if_else .)
    INT             reduce using rule 3 (algorithm_line -> if_else .)
    BOOLEAN         reduce using rule 3 (algorithm_line -> if_else .)
    VARIABLE        reduce using rule 3 (algorithm_line -> if_else .)
    LET             reduce using rule 3 (algorithm_line -> if_else .)
    FOR             reduce using rule 3 (algorithm_line -> if_else .)
    WHILE           reduce using rule 3 (algorithm_line -> if_else .)
    $end            reduce using rule 3 (algorithm_line -> if_else .)
    SB2             reduce using rule 3 (algorithm_line -> if_else .)


state 5

    (4) algorithm_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 17
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 6

    (5) algorithm_line -> var_assign . PyC

    PyC             shift and go to state 25


state 7

    (6) algorithm_line -> for_loop . PyC

    PyC             shift and go to state 26


state 8

    (7) algorithm_line -> while_loop . PyC

    PyC             shift and go to state 27


state 9

    (27) if_else -> IF . expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 28

state 10

    (14) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 29


state 11

    (50) expression -> INT .

    PyC             reduce using rule 50 (expression -> INT .)
    EQUALS_EQUALS   reduce using rule 50 (expression -> INT .)
    DISTINCT        reduce using rule 50 (expression -> INT .)
    LESS_EQUAL      reduce using rule 50 (expression -> INT .)
    MORE_EQUAL      reduce using rule 50 (expression -> INT .)
    MORE_THAN       reduce using rule 50 (expression -> INT .)
    LESS_THAN       reduce using rule 50 (expression -> INT .)
    SB1             reduce using rule 50 (expression -> INT .)
    COMMA           reduce using rule 50 (expression -> INT .)
    CLOSE_P         reduce using rule 50 (expression -> INT .)
    SB2             reduce using rule 50 (expression -> INT .)


state 12

    (51) expression -> BOOLEAN .

    PyC             reduce using rule 51 (expression -> BOOLEAN .)
    EQUALS_EQUALS   reduce using rule 51 (expression -> BOOLEAN .)
    DISTINCT        reduce using rule 51 (expression -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 51 (expression -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 51 (expression -> BOOLEAN .)
    MORE_THAN       reduce using rule 51 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 51 (expression -> BOOLEAN .)
    SB1             reduce using rule 51 (expression -> BOOLEAN .)
    COMMA           reduce using rule 51 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 51 (expression -> BOOLEAN .)
    SB2             reduce using rule 51 (expression -> BOOLEAN .)


state 13

    (52) expression -> VARIABLE .

    PyC             reduce using rule 52 (expression -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 52 (expression -> VARIABLE .)
    DISTINCT        reduce using rule 52 (expression -> VARIABLE .)
    LESS_EQUAL      reduce using rule 52 (expression -> VARIABLE .)
    MORE_EQUAL      reduce using rule 52 (expression -> VARIABLE .)
    MORE_THAN       reduce using rule 52 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 52 (expression -> VARIABLE .)
    SB1             reduce using rule 52 (expression -> VARIABLE .)
    COMMA           reduce using rule 52 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 52 (expression -> VARIABLE .)
    SB2             reduce using rule 52 (expression -> VARIABLE .)


state 14

    (22) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 30


state 15

    (23) for_loop -> FOR . INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> FOR . VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR . INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> FOR . VARIABLE IN INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 31
    VARIABLE        shift and go to state 32


state 16

    (35) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE . OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE . OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE . OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE . OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE . OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> WHILE . OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> WHILE . OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> WHILE . OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> WHILE . OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> WHILE . OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> WHILE . OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> WHILE . OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    OPEN_P          shift and go to state 33


state 17

    (4) algorithm_line -> expression PyC .

    IF              reduce using rule 4 (algorithm_line -> expression PyC .)
    OPERA           reduce using rule 4 (algorithm_line -> expression PyC .)
    INT             reduce using rule 4 (algorithm_line -> expression PyC .)
    BOOLEAN         reduce using rule 4 (algorithm_line -> expression PyC .)
    VARIABLE        reduce using rule 4 (algorithm_line -> expression PyC .)
    LET             reduce using rule 4 (algorithm_line -> expression PyC .)
    FOR             reduce using rule 4 (algorithm_line -> expression PyC .)
    WHILE           reduce using rule 4 (algorithm_line -> expression PyC .)
    $end            reduce using rule 4 (algorithm_line -> expression PyC .)
    SB2             reduce using rule 4 (algorithm_line -> expression PyC .)


state 18

    (21) expression -> expression bool_operator . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 34

state 19

    (15) bool_operator -> EQUALS_EQUALS .

    OPERA           reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    INT             reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    BOOLEAN         reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)


state 20

    (16) bool_operator -> DISTINCT .

    OPERA           reduce using rule 16 (bool_operator -> DISTINCT .)
    INT             reduce using rule 16 (bool_operator -> DISTINCT .)
    BOOLEAN         reduce using rule 16 (bool_operator -> DISTINCT .)
    VARIABLE        reduce using rule 16 (bool_operator -> DISTINCT .)


state 21

    (17) bool_operator -> LESS_EQUAL .

    OPERA           reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    INT             reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    BOOLEAN         reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 17 (bool_operator -> LESS_EQUAL .)


state 22

    (18) bool_operator -> MORE_EQUAL .

    OPERA           reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    INT             reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    BOOLEAN         reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    VARIABLE        reduce using rule 18 (bool_operator -> MORE_EQUAL .)


state 23

    (19) bool_operator -> MORE_THAN .

    OPERA           reduce using rule 19 (bool_operator -> MORE_THAN .)
    INT             reduce using rule 19 (bool_operator -> MORE_THAN .)
    BOOLEAN         reduce using rule 19 (bool_operator -> MORE_THAN .)
    VARIABLE        reduce using rule 19 (bool_operator -> MORE_THAN .)


state 24

    (20) bool_operator -> LESS_THAN .

    OPERA           reduce using rule 20 (bool_operator -> LESS_THAN .)
    INT             reduce using rule 20 (bool_operator -> LESS_THAN .)
    BOOLEAN         reduce using rule 20 (bool_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 20 (bool_operator -> LESS_THAN .)


state 25

    (5) algorithm_line -> var_assign PyC .

    IF              reduce using rule 5 (algorithm_line -> var_assign PyC .)
    OPERA           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    INT             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 5 (algorithm_line -> var_assign PyC .)
    VARIABLE        reduce using rule 5 (algorithm_line -> var_assign PyC .)
    LET             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    FOR             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    WHILE           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    $end            reduce using rule 5 (algorithm_line -> var_assign PyC .)
    SB2             reduce using rule 5 (algorithm_line -> var_assign PyC .)


state 26

    (6) algorithm_line -> for_loop PyC .

    IF              reduce using rule 6 (algorithm_line -> for_loop PyC .)
    OPERA           reduce using rule 6 (algorithm_line -> for_loop PyC .)
    INT             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 6 (algorithm_line -> for_loop PyC .)
    VARIABLE        reduce using rule 6 (algorithm_line -> for_loop PyC .)
    LET             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    FOR             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    WHILE           reduce using rule 6 (algorithm_line -> for_loop PyC .)
    $end            reduce using rule 6 (algorithm_line -> for_loop PyC .)
    SB2             reduce using rule 6 (algorithm_line -> for_loop PyC .)


state 27

    (7) algorithm_line -> while_loop PyC .

    IF              reduce using rule 7 (algorithm_line -> while_loop PyC .)
    OPERA           reduce using rule 7 (algorithm_line -> while_loop PyC .)
    INT             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 7 (algorithm_line -> while_loop PyC .)
    VARIABLE        reduce using rule 7 (algorithm_line -> while_loop PyC .)
    LET             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    FOR             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    WHILE           reduce using rule 7 (algorithm_line -> while_loop PyC .)
    $end            reduce using rule 7 (algorithm_line -> while_loop PyC .)
    SB2             reduce using rule 7 (algorithm_line -> while_loop PyC .)


state 28

    (27) if_else -> IF expression . SB1 statement SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB1             shift and go to state 35
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 29

    (14) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (8) operator -> . PLUS
    (9) operator -> . MINUS
    (10) operator -> . INT_DIV
    (11) operator -> . DIVIDE
    (12) operator -> . EXP
    (13) operator -> . MULTIPLY

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    INT_DIV         shift and go to state 39
    DIVIDE          shift and go to state 40
    EXP             shift and go to state 41
    MULTIPLY        shift and go to state 42

    operator                       shift and go to state 36

state 30

    (22) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 43


state 31

    (23) for_loop -> FOR INT . IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 44


state 32

    (24) for_loop -> FOR VARIABLE . IN INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 45


state 33

    (35) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE OPEN_P . VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE OPEN_P . VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE OPEN_P . VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P . VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE OPEN_P . VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> WHILE OPEN_P . VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> WHILE OPEN_P . VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> WHILE OPEN_P . VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> WHILE OPEN_P . VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> WHILE OPEN_P . VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> WHILE OPEN_P . VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> WHILE OPEN_P . VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 46


state 34

    (21) expression -> expression bool_operator expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for DISTINCT resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    PyC             reduce using rule 21 (expression -> expression bool_operator expression .)
    SB1             reduce using rule 21 (expression -> expression bool_operator expression .)
    COMMA           reduce using rule 21 (expression -> expression bool_operator expression .)
    CLOSE_P         reduce using rule 21 (expression -> expression bool_operator expression .)
    SB2             reduce using rule 21 (expression -> expression bool_operator expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

  ! EQUALS_EQUALS   [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! DISTINCT        [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]

    bool_operator                  shift and go to state 18

state 35

    (27) if_else -> IF expression SB1 . statement SB2
    (28) statement -> . statement statement_line
    (29) statement -> . empty
    (49) empty -> .

    SB2             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)

    statement                      shift and go to state 47
    empty                          shift and go to state 48

state 36

    (14) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 49


state 37

    (8) operator -> PLUS .

    COMMA           reduce using rule 8 (operator -> PLUS .)


state 38

    (9) operator -> MINUS .

    COMMA           reduce using rule 9 (operator -> MINUS .)


state 39

    (10) operator -> INT_DIV .

    COMMA           reduce using rule 10 (operator -> INT_DIV .)


state 40

    (11) operator -> DIVIDE .

    COMMA           reduce using rule 11 (operator -> DIVIDE .)


state 41

    (12) operator -> EXP .

    COMMA           reduce using rule 12 (operator -> EXP .)


state 42

    (13) operator -> MULTIPLY .

    COMMA           reduce using rule 13 (operator -> MULTIPLY .)


state 43

    (22) var_assign -> LET VARIABLE EQUALS . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 50

state 44

    (23) for_loop -> FOR INT IN . INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 51


state 45

    (24) for_loop -> FOR VARIABLE IN . INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 52


state 46

    (35) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE OPEN_P VARIABLE . LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE OPEN_P VARIABLE . LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE OPEN_P VARIABLE . LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P VARIABLE . LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE OPEN_P VARIABLE . MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> WHILE OPEN_P VARIABLE . MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> WHILE OPEN_P VARIABLE . MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> WHILE OPEN_P VARIABLE . MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> WHILE OPEN_P VARIABLE . EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> WHILE OPEN_P VARIABLE . EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> WHILE OPEN_P VARIABLE . EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> WHILE OPEN_P VARIABLE . EQUALS VARIABLE CLOSE_P SB1 expression SB2

    DISTINCT        shift and go to state 53
    LESS_EQUAL      shift and go to state 54
    LESS_THAN       shift and go to state 55
    MORE_EQUAL      shift and go to state 56
    MORE_THAN       shift and go to state 57
    EQUALS_EQUALS   shift and go to state 58
    EQUALS          shift and go to state 59


state 47

    (27) if_else -> IF expression SB1 statement . SB2
    (28) statement -> statement . statement_line
    (30) statement_line -> . if_else
    (31) statement_line -> . expression PyC
    (32) statement_line -> . var_assign PyC
    (33) statement_line -> . for_loop PyC
    (34) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 61
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    expression                     shift and go to state 60
    statement_line                 shift and go to state 62
    if_else                        shift and go to state 63
    var_assign                     shift and go to state 64
    for_loop                       shift and go to state 65
    while_loop                     shift and go to state 66

state 48

    (29) statement -> empty .

    SB2             reduce using rule 29 (statement -> empty .)
    IF              reduce using rule 29 (statement -> empty .)
    OPERA           reduce using rule 29 (statement -> empty .)
    INT             reduce using rule 29 (statement -> empty .)
    BOOLEAN         reduce using rule 29 (statement -> empty .)
    VARIABLE        reduce using rule 29 (statement -> empty .)
    LET             reduce using rule 29 (statement -> empty .)
    FOR             reduce using rule 29 (statement -> empty .)
    WHILE           reduce using rule 29 (statement -> empty .)


state 49

    (14) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 67

state 50

    (22) var_assign -> LET VARIABLE EQUALS expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             reduce using rule 22 (var_assign -> LET VARIABLE EQUALS expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 51

    (23) for_loop -> FOR INT IN INT . dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 68
    dDOT_E          shift and go to state 69


state 52

    (24) for_loop -> FOR VARIABLE IN INT . dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 70
    dDOT_E          shift and go to state 71


state 53

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . INT CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 73
    VARIABLE        shift and go to state 72


state 54

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL . INT CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 75
    VARIABLE        shift and go to state 74


state 55

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN . INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 77
    VARIABLE        shift and go to state 76


state 56

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL . INT CLOSE_P SB1 expression SB2
    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 79
    VARIABLE        shift and go to state 78


state 57

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN . INT CLOSE_P SB1 expression SB2
    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 81
    VARIABLE        shift and go to state 80


state 58

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS . INT CLOSE_P SB1 expression SB2
    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 83
    VARIABLE        shift and go to state 82


state 59

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS . INT CLOSE_P SB1 expression SB2
    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 85
    VARIABLE        shift and go to state 84


state 60

    (31) statement_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 86
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 61

    (27) if_else -> IF expression SB1 statement SB2 .

    IF              reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    OPERA           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    INT             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    BOOLEAN         reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    VARIABLE        reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    LET             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    FOR             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    WHILE           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    $end            reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)
    SB2             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 .)


state 62

    (28) statement -> statement statement_line .

    SB2             reduce using rule 28 (statement -> statement statement_line .)
    IF              reduce using rule 28 (statement -> statement statement_line .)
    OPERA           reduce using rule 28 (statement -> statement statement_line .)
    INT             reduce using rule 28 (statement -> statement statement_line .)
    BOOLEAN         reduce using rule 28 (statement -> statement statement_line .)
    VARIABLE        reduce using rule 28 (statement -> statement statement_line .)
    LET             reduce using rule 28 (statement -> statement statement_line .)
    FOR             reduce using rule 28 (statement -> statement statement_line .)
    WHILE           reduce using rule 28 (statement -> statement statement_line .)


state 63

    (30) statement_line -> if_else .

    SB2             reduce using rule 30 (statement_line -> if_else .)
    IF              reduce using rule 30 (statement_line -> if_else .)
    OPERA           reduce using rule 30 (statement_line -> if_else .)
    INT             reduce using rule 30 (statement_line -> if_else .)
    BOOLEAN         reduce using rule 30 (statement_line -> if_else .)
    VARIABLE        reduce using rule 30 (statement_line -> if_else .)
    LET             reduce using rule 30 (statement_line -> if_else .)
    FOR             reduce using rule 30 (statement_line -> if_else .)
    WHILE           reduce using rule 30 (statement_line -> if_else .)


state 64

    (32) statement_line -> var_assign . PyC

    PyC             shift and go to state 87


state 65

    (33) statement_line -> for_loop . PyC

    PyC             shift and go to state 88


state 66

    (34) statement_line -> while_loop . PyC

    PyC             shift and go to state 89


state 67

    (14) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    COMMA           shift and go to state 90
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 68

    (23) for_loop -> FOR INT IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 91


state 69

    (25) for_loop -> FOR INT IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 92


state 70

    (24) for_loop -> FOR VARIABLE IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 93


state 71

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 94


state 72

    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 95


state 73

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 96


state 74

    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 97


state 75

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 98


state 76

    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 99


state 77

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 100


state 78

    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 101


state 79

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 102


state 80

    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 103


state 81

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 104


state 82

    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 105


state 83

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 106


state 84

    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 107


state 85

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 108


state 86

    (31) statement_line -> expression PyC .

    SB2             reduce using rule 31 (statement_line -> expression PyC .)
    IF              reduce using rule 31 (statement_line -> expression PyC .)
    OPERA           reduce using rule 31 (statement_line -> expression PyC .)
    INT             reduce using rule 31 (statement_line -> expression PyC .)
    BOOLEAN         reduce using rule 31 (statement_line -> expression PyC .)
    VARIABLE        reduce using rule 31 (statement_line -> expression PyC .)
    LET             reduce using rule 31 (statement_line -> expression PyC .)
    FOR             reduce using rule 31 (statement_line -> expression PyC .)
    WHILE           reduce using rule 31 (statement_line -> expression PyC .)


state 87

    (32) statement_line -> var_assign PyC .

    SB2             reduce using rule 32 (statement_line -> var_assign PyC .)
    IF              reduce using rule 32 (statement_line -> var_assign PyC .)
    OPERA           reduce using rule 32 (statement_line -> var_assign PyC .)
    INT             reduce using rule 32 (statement_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 32 (statement_line -> var_assign PyC .)
    VARIABLE        reduce using rule 32 (statement_line -> var_assign PyC .)
    LET             reduce using rule 32 (statement_line -> var_assign PyC .)
    FOR             reduce using rule 32 (statement_line -> var_assign PyC .)
    WHILE           reduce using rule 32 (statement_line -> var_assign PyC .)


state 88

    (33) statement_line -> for_loop PyC .

    SB2             reduce using rule 33 (statement_line -> for_loop PyC .)
    IF              reduce using rule 33 (statement_line -> for_loop PyC .)
    OPERA           reduce using rule 33 (statement_line -> for_loop PyC .)
    INT             reduce using rule 33 (statement_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 33 (statement_line -> for_loop PyC .)
    VARIABLE        reduce using rule 33 (statement_line -> for_loop PyC .)
    LET             reduce using rule 33 (statement_line -> for_loop PyC .)
    FOR             reduce using rule 33 (statement_line -> for_loop PyC .)
    WHILE           reduce using rule 33 (statement_line -> for_loop PyC .)


state 89

    (34) statement_line -> while_loop PyC .

    SB2             reduce using rule 34 (statement_line -> while_loop PyC .)
    IF              reduce using rule 34 (statement_line -> while_loop PyC .)
    OPERA           reduce using rule 34 (statement_line -> while_loop PyC .)
    INT             reduce using rule 34 (statement_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 34 (statement_line -> while_loop PyC .)
    VARIABLE        reduce using rule 34 (statement_line -> while_loop PyC .)
    LET             reduce using rule 34 (statement_line -> while_loop PyC .)
    FOR             reduce using rule 34 (statement_line -> while_loop PyC .)
    WHILE           reduce using rule 34 (statement_line -> while_loop PyC .)


state 90

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 109

state 91

    (23) for_loop -> FOR INT IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 110


state 92

    (25) for_loop -> FOR INT IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 111


state 93

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 112


state 94

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 113


state 95

    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 114


state 96

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 115


state 97

    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 116


state 98

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 117


state 99

    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 118


state 100

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 119


state 101

    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 120


state 102

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 121


state 103

    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 122


state 104

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 123


state 105

    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 124


state 106

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 125


state 107

    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 126


state 108

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 127


state 109

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    CLOSE_P         shift and go to state 128
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 110

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (49) empty -> .

    SB2             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)

    algorithm                      shift and go to state 129
    empty                          shift and go to state 2

state 111

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (49) empty -> .

    SB2             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)

    algorithm                      shift and go to state 130
    empty                          shift and go to state 2

state 112

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (49) empty -> .

    SB2             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)

    algorithm                      shift and go to state 131
    empty                          shift and go to state 2

state 113

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (49) empty -> .

    SB2             reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    OPERA           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    BOOLEAN         reduce using rule 49 (empty -> .)
    VARIABLE        reduce using rule 49 (empty -> .)
    LET             reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)

    algorithm                      shift and go to state 132
    empty                          shift and go to state 2

state 114

    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 133

state 115

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 134

state 116

    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 135

state 117

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 136

state 118

    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 137

state 119

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 138

state 120

    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 139

state 121

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 140

state 122

    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 141

state 123

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 142

state 124

    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 143

state 125

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 144

state 126

    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 145

state 127

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 146

state 128

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    EQUALS_EQUALS   reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    DISTINCT        reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB1             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB2             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)


state 129

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 147
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 130

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 148
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 131

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 149
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 132

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (50) expression -> . INT
    (51) expression -> . BOOLEAN
    (52) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (42) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (43) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (44) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (45) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (46) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (47) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (48) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 150
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 133

    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 151
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 134

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 152
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 135

    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 153
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 136

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 154
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 137

    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 155
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 138

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 156
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 139

    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 157
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 140

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 158
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 141

    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 159
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 142

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 160
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 143

    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 161
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 144

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 162
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 145

    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 163
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 146

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 164
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 147

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .)


state 148

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .)


state 149

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .)


state 150

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .)


state 151

    (36) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 36 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .)


state 152

    (35) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 35 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .)


state 153

    (38) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 38 (while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .)


state 154

    (37) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 37 (while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 155

    (40) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 40 (while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 156

    (39) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 39 (while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2 .)


state 157

    (42) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 42 (while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .)


state 158

    (41) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 41 (while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 159

    (44) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 44 (while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 160

    (43) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 43 (while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2 .)


state 161

    (46) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 46 (while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2 .)


state 162

    (45) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 45 (while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .)


state 163

    (48) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 48 (while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .)


state 164

    (47) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 47 (while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 34 resolved as shift
WARNING: shift/reduce conflict for DISTINCT in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
