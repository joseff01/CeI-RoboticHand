Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A1
    A2
    A3
    COMMENTARY
    ELSE

Grammar

Rule 0     S' -> algorithm
Rule 1     algorithm -> algorithm algorithm_line
Rule 2     algorithm -> empty
Rule 3     algorithm_line -> expression PyC
Rule 4     algorithm_line -> var_assign PyC
Rule 5     algorithm_line -> for_loop PyC
Rule 6     algorithm_line -> while_loop PyC
Rule 7     algorithm_line -> if_else
Rule 8     operator -> PLUS
Rule 9     operator -> MINUS
Rule 10    operator -> INT_DIV
Rule 11    operator -> DIVIDE
Rule 12    operator -> EXP
Rule 13    operator -> MULTIPLY
Rule 14    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 15    bool_operator -> EQUALS_EQUALS
Rule 16    bool_operator -> DISTINCT
Rule 17    bool_operator -> LESS_EQUAL
Rule 18    bool_operator -> MORE_EQUAL
Rule 19    bool_operator -> MORE_THAN
Rule 20    bool_operator -> LESS_THAN
Rule 21    expression -> expression bool_operator expression
Rule 22    var_assign -> LET VARIABLE EQUALS expression
Rule 23    for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2
Rule 24    for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
Rule 25    for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2
Rule 26    for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
Rule 27    if_else -> IF expression SB1 algorithm SB2
Rule 28    while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
Rule 29    while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
Rule 30    while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
Rule 31    while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
Rule 32    while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
Rule 33    while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 34    while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
Rule 35    while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
Rule 36    while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
Rule 37    while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 38    while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
Rule 39    while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
Rule 40    while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
Rule 41    while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
Rule 42    empty -> <empty>
Rule 43    expression -> INT
Rule 44    expression -> BOOLEAN
Rule 45    expression -> VARIABLE

Terminals, with rules where they appear

A1                   : 
A2                   : 
A3                   : 
BOOLEAN              : 44
CLOSE_P              : 14 28 29 30 31 32 33 34 35 36 37 38 39 40 41
COMMA                : 14 14
COMMENTARY           : 
DISTINCT             : 16 28 29
DIVIDE               : 11
ELSE                 : 
EQUALS               : 22 40 41
EQUALS_EQUALS        : 15 38 39
EXP                  : 12
FOR                  : 23 24 25 26
IF                   : 27
IN                   : 23 24 25 26
INT                  : 23 23 23 24 24 25 25 25 26 26 28 30 32 34 36 38 40 43
INT_DIV              : 10
LESS_EQUAL           : 17 30 31
LESS_THAN            : 20 32 33
LET                  : 22
MINUS                : 9
MORE_EQUAL           : 18 34 35
MORE_THAN            : 19 36 37
MULTIPLY             : 13
OPEN_P               : 14 28 29 30 31 32 33 34 35 36 37 38 39 40 41
OPERA                : 14
PLUS                 : 8
PyC                  : 3 4 5 6
SB1                  : 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
SB2                  : 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
VARIABLE             : 22 24 26 28 29 29 30 31 31 32 33 33 34 35 35 36 37 37 38 39 39 40 41 41 45
WHILE                : 28 29 30 31 32 33 34 35 36 37 38 39 40 41
dDOT                 : 23 24
dDOT_E               : 25 26
error                : 

Nonterminals, with rules where they appear

algorithm            : 1 23 24 25 26 27 0
algorithm_line       : 1
bool_operator        : 21
empty                : 2
expression           : 3 14 14 21 21 22 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
for_loop             : 5
if_else              : 7
operator             : 14
var_assign           : 4
while_loop           : 6

Parsing method: LALR

state 0

    (0) S' -> . algorithm
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)
    $end            reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> algorithm .
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 2

    (2) algorithm -> empty .

    OPERA           reduce using rule 2 (algorithm -> empty .)
    INT             reduce using rule 2 (algorithm -> empty .)
    BOOLEAN         reduce using rule 2 (algorithm -> empty .)
    VARIABLE        reduce using rule 2 (algorithm -> empty .)
    LET             reduce using rule 2 (algorithm -> empty .)
    FOR             reduce using rule 2 (algorithm -> empty .)
    WHILE           reduce using rule 2 (algorithm -> empty .)
    IF              reduce using rule 2 (algorithm -> empty .)
    $end            reduce using rule 2 (algorithm -> empty .)
    SB2             reduce using rule 2 (algorithm -> empty .)


state 3

    (1) algorithm -> algorithm algorithm_line .

    OPERA           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    INT             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    BOOLEAN         reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    VARIABLE        reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    LET             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    FOR             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    WHILE           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    IF              reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    $end            reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    SB2             reduce using rule 1 (algorithm -> algorithm algorithm_line .)


state 4

    (3) algorithm_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 17
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 5

    (4) algorithm_line -> var_assign . PyC

    PyC             shift and go to state 25


state 6

    (5) algorithm_line -> for_loop . PyC

    PyC             shift and go to state 26


state 7

    (6) algorithm_line -> while_loop . PyC

    PyC             shift and go to state 27


state 8

    (7) algorithm_line -> if_else .

    OPERA           reduce using rule 7 (algorithm_line -> if_else .)
    INT             reduce using rule 7 (algorithm_line -> if_else .)
    BOOLEAN         reduce using rule 7 (algorithm_line -> if_else .)
    VARIABLE        reduce using rule 7 (algorithm_line -> if_else .)
    LET             reduce using rule 7 (algorithm_line -> if_else .)
    FOR             reduce using rule 7 (algorithm_line -> if_else .)
    WHILE           reduce using rule 7 (algorithm_line -> if_else .)
    IF              reduce using rule 7 (algorithm_line -> if_else .)
    $end            reduce using rule 7 (algorithm_line -> if_else .)
    SB2             reduce using rule 7 (algorithm_line -> if_else .)


state 9

    (14) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 28


state 10

    (43) expression -> INT .

    PyC             reduce using rule 43 (expression -> INT .)
    EQUALS_EQUALS   reduce using rule 43 (expression -> INT .)
    DISTINCT        reduce using rule 43 (expression -> INT .)
    LESS_EQUAL      reduce using rule 43 (expression -> INT .)
    MORE_EQUAL      reduce using rule 43 (expression -> INT .)
    MORE_THAN       reduce using rule 43 (expression -> INT .)
    LESS_THAN       reduce using rule 43 (expression -> INT .)
    SB1             reduce using rule 43 (expression -> INT .)
    COMMA           reduce using rule 43 (expression -> INT .)
    CLOSE_P         reduce using rule 43 (expression -> INT .)
    SB2             reduce using rule 43 (expression -> INT .)


state 11

    (44) expression -> BOOLEAN .

    PyC             reduce using rule 44 (expression -> BOOLEAN .)
    EQUALS_EQUALS   reduce using rule 44 (expression -> BOOLEAN .)
    DISTINCT        reduce using rule 44 (expression -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 44 (expression -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 44 (expression -> BOOLEAN .)
    MORE_THAN       reduce using rule 44 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 44 (expression -> BOOLEAN .)
    SB1             reduce using rule 44 (expression -> BOOLEAN .)
    COMMA           reduce using rule 44 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 44 (expression -> BOOLEAN .)
    SB2             reduce using rule 44 (expression -> BOOLEAN .)


state 12

    (45) expression -> VARIABLE .

    PyC             reduce using rule 45 (expression -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 45 (expression -> VARIABLE .)
    DISTINCT        reduce using rule 45 (expression -> VARIABLE .)
    LESS_EQUAL      reduce using rule 45 (expression -> VARIABLE .)
    MORE_EQUAL      reduce using rule 45 (expression -> VARIABLE .)
    MORE_THAN       reduce using rule 45 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 45 (expression -> VARIABLE .)
    SB1             reduce using rule 45 (expression -> VARIABLE .)
    COMMA           reduce using rule 45 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 45 (expression -> VARIABLE .)
    SB2             reduce using rule 45 (expression -> VARIABLE .)


state 13

    (22) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 29


state 14

    (23) for_loop -> FOR . INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> FOR . VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR . INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> FOR . VARIABLE IN INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 30
    VARIABLE        shift and go to state 31


state 15

    (28) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> WHILE . OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> WHILE . OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> WHILE . OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> WHILE . OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> WHILE . OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> WHILE . OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE . OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE . OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE . OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE . OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE . OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE . OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    OPEN_P          shift and go to state 32


state 16

    (27) if_else -> IF . expression SB1 algorithm SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 33

state 17

    (3) algorithm_line -> expression PyC .

    OPERA           reduce using rule 3 (algorithm_line -> expression PyC .)
    INT             reduce using rule 3 (algorithm_line -> expression PyC .)
    BOOLEAN         reduce using rule 3 (algorithm_line -> expression PyC .)
    VARIABLE        reduce using rule 3 (algorithm_line -> expression PyC .)
    LET             reduce using rule 3 (algorithm_line -> expression PyC .)
    FOR             reduce using rule 3 (algorithm_line -> expression PyC .)
    WHILE           reduce using rule 3 (algorithm_line -> expression PyC .)
    IF              reduce using rule 3 (algorithm_line -> expression PyC .)
    $end            reduce using rule 3 (algorithm_line -> expression PyC .)
    SB2             reduce using rule 3 (algorithm_line -> expression PyC .)


state 18

    (21) expression -> expression bool_operator . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 34

state 19

    (15) bool_operator -> EQUALS_EQUALS .

    OPERA           reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    INT             reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    BOOLEAN         reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)


state 20

    (16) bool_operator -> DISTINCT .

    OPERA           reduce using rule 16 (bool_operator -> DISTINCT .)
    INT             reduce using rule 16 (bool_operator -> DISTINCT .)
    BOOLEAN         reduce using rule 16 (bool_operator -> DISTINCT .)
    VARIABLE        reduce using rule 16 (bool_operator -> DISTINCT .)


state 21

    (17) bool_operator -> LESS_EQUAL .

    OPERA           reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    INT             reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    BOOLEAN         reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 17 (bool_operator -> LESS_EQUAL .)


state 22

    (18) bool_operator -> MORE_EQUAL .

    OPERA           reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    INT             reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    BOOLEAN         reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    VARIABLE        reduce using rule 18 (bool_operator -> MORE_EQUAL .)


state 23

    (19) bool_operator -> MORE_THAN .

    OPERA           reduce using rule 19 (bool_operator -> MORE_THAN .)
    INT             reduce using rule 19 (bool_operator -> MORE_THAN .)
    BOOLEAN         reduce using rule 19 (bool_operator -> MORE_THAN .)
    VARIABLE        reduce using rule 19 (bool_operator -> MORE_THAN .)


state 24

    (20) bool_operator -> LESS_THAN .

    OPERA           reduce using rule 20 (bool_operator -> LESS_THAN .)
    INT             reduce using rule 20 (bool_operator -> LESS_THAN .)
    BOOLEAN         reduce using rule 20 (bool_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 20 (bool_operator -> LESS_THAN .)


state 25

    (4) algorithm_line -> var_assign PyC .

    OPERA           reduce using rule 4 (algorithm_line -> var_assign PyC .)
    INT             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 4 (algorithm_line -> var_assign PyC .)
    VARIABLE        reduce using rule 4 (algorithm_line -> var_assign PyC .)
    LET             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    FOR             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    WHILE           reduce using rule 4 (algorithm_line -> var_assign PyC .)
    IF              reduce using rule 4 (algorithm_line -> var_assign PyC .)
    $end            reduce using rule 4 (algorithm_line -> var_assign PyC .)
    SB2             reduce using rule 4 (algorithm_line -> var_assign PyC .)


state 26

    (5) algorithm_line -> for_loop PyC .

    OPERA           reduce using rule 5 (algorithm_line -> for_loop PyC .)
    INT             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 5 (algorithm_line -> for_loop PyC .)
    VARIABLE        reduce using rule 5 (algorithm_line -> for_loop PyC .)
    LET             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    FOR             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    WHILE           reduce using rule 5 (algorithm_line -> for_loop PyC .)
    IF              reduce using rule 5 (algorithm_line -> for_loop PyC .)
    $end            reduce using rule 5 (algorithm_line -> for_loop PyC .)
    SB2             reduce using rule 5 (algorithm_line -> for_loop PyC .)


state 27

    (6) algorithm_line -> while_loop PyC .

    OPERA           reduce using rule 6 (algorithm_line -> while_loop PyC .)
    INT             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 6 (algorithm_line -> while_loop PyC .)
    VARIABLE        reduce using rule 6 (algorithm_line -> while_loop PyC .)
    LET             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    FOR             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    WHILE           reduce using rule 6 (algorithm_line -> while_loop PyC .)
    IF              reduce using rule 6 (algorithm_line -> while_loop PyC .)
    $end            reduce using rule 6 (algorithm_line -> while_loop PyC .)
    SB2             reduce using rule 6 (algorithm_line -> while_loop PyC .)


state 28

    (14) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (8) operator -> . PLUS
    (9) operator -> . MINUS
    (10) operator -> . INT_DIV
    (11) operator -> . DIVIDE
    (12) operator -> . EXP
    (13) operator -> . MULTIPLY

    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    INT_DIV         shift and go to state 38
    DIVIDE          shift and go to state 39
    EXP             shift and go to state 40
    MULTIPLY        shift and go to state 41

    operator                       shift and go to state 35

state 29

    (22) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 42


state 30

    (23) for_loop -> FOR INT . IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 43


state 31

    (24) for_loop -> FOR VARIABLE . IN INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 44


state 32

    (28) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> WHILE OPEN_P . VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> WHILE OPEN_P . VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> WHILE OPEN_P . VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> WHILE OPEN_P . VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> WHILE OPEN_P . VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> WHILE OPEN_P . VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE OPEN_P . VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE OPEN_P . VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE OPEN_P . VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE OPEN_P . VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P . VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE OPEN_P . VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 45


state 33

    (27) if_else -> IF expression . SB1 algorithm SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB1             shift and go to state 46
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 34

    (21) expression -> expression bool_operator expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for DISTINCT resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    PyC             reduce using rule 21 (expression -> expression bool_operator expression .)
    SB1             reduce using rule 21 (expression -> expression bool_operator expression .)
    COMMA           reduce using rule 21 (expression -> expression bool_operator expression .)
    CLOSE_P         reduce using rule 21 (expression -> expression bool_operator expression .)
    SB2             reduce using rule 21 (expression -> expression bool_operator expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

  ! EQUALS_EQUALS   [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! DISTINCT        [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]

    bool_operator                  shift and go to state 18

state 35

    (14) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 47


state 36

    (8) operator -> PLUS .

    COMMA           reduce using rule 8 (operator -> PLUS .)


state 37

    (9) operator -> MINUS .

    COMMA           reduce using rule 9 (operator -> MINUS .)


state 38

    (10) operator -> INT_DIV .

    COMMA           reduce using rule 10 (operator -> INT_DIV .)


state 39

    (11) operator -> DIVIDE .

    COMMA           reduce using rule 11 (operator -> DIVIDE .)


state 40

    (12) operator -> EXP .

    COMMA           reduce using rule 12 (operator -> EXP .)


state 41

    (13) operator -> MULTIPLY .

    COMMA           reduce using rule 13 (operator -> MULTIPLY .)


state 42

    (22) var_assign -> LET VARIABLE EQUALS . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 48

state 43

    (23) for_loop -> FOR INT IN . INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 49


state 44

    (24) for_loop -> FOR VARIABLE IN . INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 50


state 45

    (28) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> WHILE OPEN_P VARIABLE . LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> WHILE OPEN_P VARIABLE . LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> WHILE OPEN_P VARIABLE . LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> WHILE OPEN_P VARIABLE . LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> WHILE OPEN_P VARIABLE . MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> WHILE OPEN_P VARIABLE . MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> WHILE OPEN_P VARIABLE . MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE OPEN_P VARIABLE . MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> WHILE OPEN_P VARIABLE . EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE OPEN_P VARIABLE . EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P VARIABLE . EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE OPEN_P VARIABLE . EQUALS VARIABLE CLOSE_P SB1 expression SB2

    DISTINCT        shift and go to state 51
    LESS_EQUAL      shift and go to state 52
    LESS_THAN       shift and go to state 53
    MORE_EQUAL      shift and go to state 54
    MORE_THAN       shift and go to state 55
    EQUALS_EQUALS   shift and go to state 56
    EQUALS          shift and go to state 57


state 46

    (27) if_else -> IF expression SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    SB2             reduce using rule 42 (empty -> .)
    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 58
    empty                          shift and go to state 2

state 47

    (14) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 59

state 48

    (22) var_assign -> LET VARIABLE EQUALS expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             reduce using rule 22 (var_assign -> LET VARIABLE EQUALS expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 49

    (23) for_loop -> FOR INT IN INT . dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 60
    dDOT_E          shift and go to state 61


state 50

    (24) for_loop -> FOR VARIABLE IN INT . dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 62
    dDOT_E          shift and go to state 63


state 51

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . INT CLOSE_P SB1 expression SB2
    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 65
    VARIABLE        shift and go to state 64


state 52

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL . INT CLOSE_P SB1 expression SB2
    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 67
    VARIABLE        shift and go to state 66


state 53

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN . INT CLOSE_P SB1 expression SB2
    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 69
    VARIABLE        shift and go to state 68


state 54

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL . INT CLOSE_P SB1 expression SB2
    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 71
    VARIABLE        shift and go to state 70


state 55

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN . INT CLOSE_P SB1 expression SB2
    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 73
    VARIABLE        shift and go to state 72


state 56

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS . INT CLOSE_P SB1 expression SB2
    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 75
    VARIABLE        shift and go to state 74


state 57

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS . INT CLOSE_P SB1 expression SB2
    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 77
    VARIABLE        shift and go to state 76


state 58

    (27) if_else -> IF expression SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    SB2             shift and go to state 78
    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    expression                     shift and go to state 4
    algorithm_line                 shift and go to state 3
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 59

    (14) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    COMMA           shift and go to state 79
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 60

    (23) for_loop -> FOR INT IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 80


state 61

    (25) for_loop -> FOR INT IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 81


state 62

    (24) for_loop -> FOR VARIABLE IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 82


state 63

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 83


state 64

    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 84


state 65

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 85


state 66

    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 86


state 67

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 87


state 68

    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 88


state 69

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 89


state 70

    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 90


state 71

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 91


state 72

    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 92


state 73

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 93


state 74

    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 94


state 75

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 95


state 76

    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 96


state 77

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 97


state 78

    (27) if_else -> IF expression SB1 algorithm SB2 .

    OPERA           reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    INT             reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    BOOLEAN         reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    VARIABLE        reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    LET             reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    FOR             reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    WHILE           reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    IF              reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    $end            reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)
    SB2             reduce using rule 27 (if_else -> IF expression SB1 algorithm SB2 .)


state 79

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 98

state 80

    (23) for_loop -> FOR INT IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 99


state 81

    (25) for_loop -> FOR INT IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 100


state 82

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 101


state 83

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 102


state 84

    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 103


state 85

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 104


state 86

    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 105


state 87

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 106


state 88

    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 107


state 89

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 108


state 90

    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 109


state 91

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 110


state 92

    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 111


state 93

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 112


state 94

    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 113


state 95

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 114


state 96

    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 115


state 97

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 116


state 98

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    CLOSE_P         shift and go to state 117
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 99

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    SB2             reduce using rule 42 (empty -> .)
    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 118
    empty                          shift and go to state 2

state 100

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    SB2             reduce using rule 42 (empty -> .)
    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 119
    empty                          shift and go to state 2

state 101

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    SB2             reduce using rule 42 (empty -> .)
    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 120
    empty                          shift and go to state 2

state 102

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (42) empty -> .

    SB2             reduce using rule 42 (empty -> .)
    OPERA           reduce using rule 42 (empty -> .)
    INT             reduce using rule 42 (empty -> .)
    BOOLEAN         reduce using rule 42 (empty -> .)
    VARIABLE        reduce using rule 42 (empty -> .)
    LET             reduce using rule 42 (empty -> .)
    FOR             reduce using rule 42 (empty -> .)
    WHILE           reduce using rule 42 (empty -> .)
    IF              reduce using rule 42 (empty -> .)

    algorithm                      shift and go to state 121
    empty                          shift and go to state 2

state 103

    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 122

state 104

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 123

state 105

    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 124

state 106

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 125

state 107

    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 126

state 108

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 127

state 109

    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 128

state 110

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 129

state 111

    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 130

state 112

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 131

state 113

    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 132

state 114

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 133

state 115

    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 134

state 116

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE

    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12

    expression                     shift and go to state 135

state 117

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    EQUALS_EQUALS   reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    DISTINCT        reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB1             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB2             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)


state 118

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    SB2             shift and go to state 136
    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 119

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    SB2             shift and go to state 137
    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 120

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    SB2             shift and go to state 138
    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 121

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (7) algorithm_line -> . if_else
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (43) expression -> . INT
    (44) expression -> . BOOLEAN
    (45) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (28) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (29) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (30) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (31) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (32) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2
    (33) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (34) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (35) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2
    (36) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2
    (37) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (38) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2
    (41) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
    (27) if_else -> . IF expression SB1 algorithm SB2

    SB2             shift and go to state 139
    OPERA           shift and go to state 9
    INT             shift and go to state 10
    BOOLEAN         shift and go to state 11
    VARIABLE        shift and go to state 12
    LET             shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7
    if_else                        shift and go to state 8

state 122

    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 140
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 123

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 141
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 124

    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 142
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 125

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 143
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 126

    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 144
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 127

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 145
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 128

    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 146
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 129

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 147
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 130

    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 148
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 131

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 149
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 132

    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 150
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 133

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 151
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 134

    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 152
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 135

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 153
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 136

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .)


state 137

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .)


state 138

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .)


state 139

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .)


state 140

    (29) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 29 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .)


state 141

    (28) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 28 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .)


state 142

    (31) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 31 (while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .)


state 143

    (30) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 30 (while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 144

    (33) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 33 (while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 145

    (32) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 32 (while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2 .)


state 146

    (35) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 35 (while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2 .)


state 147

    (34) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 34 (while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 148

    (37) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 37 (while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 149

    (36) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 36 (while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2 .)


state 150

    (39) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 39 (while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2 .)


state 151

    (38) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 38 (while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .)


state 152

    (41) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 41 (while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .)


state 153

    (40) while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 40 (while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 34 resolved as shift
WARNING: shift/reduce conflict for DISTINCT in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
