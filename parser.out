Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A1
    A2
    A3
    COMMENTARY

Grammar

Rule 0     S' -> algorithm
Rule 1     algorithm -> algorithm algorithm_line
Rule 2     algorithm -> empty
Rule 3     algorithm_line -> expression PyC
Rule 4     algorithm_line -> var_assign PyC
Rule 5     algorithm_line -> for_loop PyC
Rule 6     algorithm_line -> while_loop PyC
Rule 7     operator -> PLUS
Rule 8     operator -> MINUS
Rule 9     operator -> INT_DIV
Rule 10    operator -> DIVIDE
Rule 11    operator -> EXP
Rule 12    operator -> MULTIPLY
Rule 13    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 14    var_assign -> LET VARIABLE EQUALS expression
Rule 15    for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2
Rule 16    for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
Rule 17    for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2
Rule 18    for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
Rule 19    while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
Rule 20    while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
Rule 21    while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
Rule 22    while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 23    while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
Rule 24    while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
Rule 25    while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
Rule 26    while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2
Rule 27    empty -> <empty>
Rule 28    expression -> INT
Rule 29    expression -> BOOLEAN
Rule 30    expression -> VARIABLE

Terminals, with rules where they appear

A1                   : 
A2                   : 
A3                   : 
BOOLEAN              : 29
CLOSE_P              : 13 19 20 21 22 23 24 25 26
COMMA                : 13 13
COMMENTARY           : 
DISTINCT             : 19 20
DIVIDE               : 10
EQUALS               : 14 26
EQUALS_EQUALS        : 25
EXP                  : 11
FOR                  : 15 16 17 18
IN                   : 15 16 17 18
INT                  : 15 15 15 16 16 17 17 17 18 18 19 21 23 25 28
INT_DIV              : 9
LESS_EQUAL           : 21
LESS_THAN            : 22
LET                  : 14
MINUS                : 8
MORE_EQUAL           : 23
MORE_THAN            : 24
MULTIPLY             : 12
OPEN_P               : 13 19 20 21 22 23 24 25 26
OPERA                : 13
PLUS                 : 7
PyC                  : 3 4 5 6
SB1                  : 15 16 17 18 19 20 21 22 23 24 25 26
SB2                  : 15 16 17 18 19 20 21 22 23 24 25 26
VARIABLE             : 14 16 18 19 20 20 21 22 22 23 24 24 25 26 26 30
WHILE                : 19 20 21 22 23 24 25 26
dDOT                 : 15 16
dDOT_E               : 17 18
error                : 

Nonterminals, with rules where they appear

algorithm            : 1 15 16 17 18 0
algorithm_line       : 1
empty                : 2
expression           : 3 13 13 14 19 20 21 22 23 24 25 26
for_loop             : 5
operator             : 13
var_assign           : 4
while_loop           : 6

Parsing method: LALR

state 0

    (0) S' -> . algorithm
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (27) empty -> .

    OPERA           reduce using rule 27 (empty -> .)
    INT             reduce using rule 27 (empty -> .)
    BOOLEAN         reduce using rule 27 (empty -> .)
    VARIABLE        reduce using rule 27 (empty -> .)
    LET             reduce using rule 27 (empty -> .)
    FOR             reduce using rule 27 (empty -> .)
    WHILE           reduce using rule 27 (empty -> .)
    $end            reduce using rule 27 (empty -> .)

    algorithm                      shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> algorithm .
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE
    (14) var_assign -> . LET VARIABLE EQUALS expression
    (15) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (19) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7

state 2

    (2) algorithm -> empty .

    OPERA           reduce using rule 2 (algorithm -> empty .)
    INT             reduce using rule 2 (algorithm -> empty .)
    BOOLEAN         reduce using rule 2 (algorithm -> empty .)
    VARIABLE        reduce using rule 2 (algorithm -> empty .)
    LET             reduce using rule 2 (algorithm -> empty .)
    FOR             reduce using rule 2 (algorithm -> empty .)
    WHILE           reduce using rule 2 (algorithm -> empty .)
    $end            reduce using rule 2 (algorithm -> empty .)
    SB2             reduce using rule 2 (algorithm -> empty .)


state 3

    (1) algorithm -> algorithm algorithm_line .

    OPERA           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    INT             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    BOOLEAN         reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    VARIABLE        reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    LET             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    FOR             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    WHILE           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    $end            reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    SB2             reduce using rule 1 (algorithm -> algorithm algorithm_line .)


state 4

    (3) algorithm_line -> expression . PyC

    PyC             shift and go to state 15


state 5

    (4) algorithm_line -> var_assign . PyC

    PyC             shift and go to state 16


state 6

    (5) algorithm_line -> for_loop . PyC

    PyC             shift and go to state 17


state 7

    (6) algorithm_line -> while_loop . PyC

    PyC             shift and go to state 18


state 8

    (13) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 19


state 9

    (28) expression -> INT .

    PyC             reduce using rule 28 (expression -> INT .)
    COMMA           reduce using rule 28 (expression -> INT .)
    CLOSE_P         reduce using rule 28 (expression -> INT .)
    SB2             reduce using rule 28 (expression -> INT .)


state 10

    (29) expression -> BOOLEAN .

    PyC             reduce using rule 29 (expression -> BOOLEAN .)
    COMMA           reduce using rule 29 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 29 (expression -> BOOLEAN .)
    SB2             reduce using rule 29 (expression -> BOOLEAN .)


state 11

    (30) expression -> VARIABLE .

    PyC             reduce using rule 30 (expression -> VARIABLE .)
    COMMA           reduce using rule 30 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 30 (expression -> VARIABLE .)
    SB2             reduce using rule 30 (expression -> VARIABLE .)


state 12

    (14) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 20


state 13

    (15) for_loop -> FOR . INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> FOR . VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> FOR . INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> FOR . VARIABLE IN INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 21
    VARIABLE        shift and go to state 22


state 14

    (19) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> WHILE . OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> WHILE . OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> WHILE . OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> WHILE . OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> WHILE . OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> WHILE . OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> WHILE . OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    OPEN_P          shift and go to state 23


state 15

    (3) algorithm_line -> expression PyC .

    OPERA           reduce using rule 3 (algorithm_line -> expression PyC .)
    INT             reduce using rule 3 (algorithm_line -> expression PyC .)
    BOOLEAN         reduce using rule 3 (algorithm_line -> expression PyC .)
    VARIABLE        reduce using rule 3 (algorithm_line -> expression PyC .)
    LET             reduce using rule 3 (algorithm_line -> expression PyC .)
    FOR             reduce using rule 3 (algorithm_line -> expression PyC .)
    WHILE           reduce using rule 3 (algorithm_line -> expression PyC .)
    $end            reduce using rule 3 (algorithm_line -> expression PyC .)
    SB2             reduce using rule 3 (algorithm_line -> expression PyC .)


state 16

    (4) algorithm_line -> var_assign PyC .

    OPERA           reduce using rule 4 (algorithm_line -> var_assign PyC .)
    INT             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 4 (algorithm_line -> var_assign PyC .)
    VARIABLE        reduce using rule 4 (algorithm_line -> var_assign PyC .)
    LET             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    FOR             reduce using rule 4 (algorithm_line -> var_assign PyC .)
    WHILE           reduce using rule 4 (algorithm_line -> var_assign PyC .)
    $end            reduce using rule 4 (algorithm_line -> var_assign PyC .)
    SB2             reduce using rule 4 (algorithm_line -> var_assign PyC .)


state 17

    (5) algorithm_line -> for_loop PyC .

    OPERA           reduce using rule 5 (algorithm_line -> for_loop PyC .)
    INT             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 5 (algorithm_line -> for_loop PyC .)
    VARIABLE        reduce using rule 5 (algorithm_line -> for_loop PyC .)
    LET             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    FOR             reduce using rule 5 (algorithm_line -> for_loop PyC .)
    WHILE           reduce using rule 5 (algorithm_line -> for_loop PyC .)
    $end            reduce using rule 5 (algorithm_line -> for_loop PyC .)
    SB2             reduce using rule 5 (algorithm_line -> for_loop PyC .)


state 18

    (6) algorithm_line -> while_loop PyC .

    OPERA           reduce using rule 6 (algorithm_line -> while_loop PyC .)
    INT             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 6 (algorithm_line -> while_loop PyC .)
    VARIABLE        reduce using rule 6 (algorithm_line -> while_loop PyC .)
    LET             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    FOR             reduce using rule 6 (algorithm_line -> while_loop PyC .)
    WHILE           reduce using rule 6 (algorithm_line -> while_loop PyC .)
    $end            reduce using rule 6 (algorithm_line -> while_loop PyC .)
    SB2             reduce using rule 6 (algorithm_line -> while_loop PyC .)


state 19

    (13) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (7) operator -> . PLUS
    (8) operator -> . MINUS
    (9) operator -> . INT_DIV
    (10) operator -> . DIVIDE
    (11) operator -> . EXP
    (12) operator -> . MULTIPLY

    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    INT_DIV         shift and go to state 27
    DIVIDE          shift and go to state 28
    EXP             shift and go to state 29
    MULTIPLY        shift and go to state 30

    operator                       shift and go to state 24

state 20

    (14) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 31


state 21

    (15) for_loop -> FOR INT . IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> FOR INT . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 32


state 22

    (16) for_loop -> FOR VARIABLE . IN INT dDOT INT SB1 algorithm SB2
    (18) for_loop -> FOR VARIABLE . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 33


state 23

    (19) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> WHILE OPEN_P . VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> WHILE OPEN_P . VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> WHILE OPEN_P . VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> WHILE OPEN_P . VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> WHILE OPEN_P . VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> WHILE OPEN_P . VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> WHILE OPEN_P . VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 34


state 24

    (13) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 35


state 25

    (7) operator -> PLUS .

    COMMA           reduce using rule 7 (operator -> PLUS .)


state 26

    (8) operator -> MINUS .

    COMMA           reduce using rule 8 (operator -> MINUS .)


state 27

    (9) operator -> INT_DIV .

    COMMA           reduce using rule 9 (operator -> INT_DIV .)


state 28

    (10) operator -> DIVIDE .

    COMMA           reduce using rule 10 (operator -> DIVIDE .)


state 29

    (11) operator -> EXP .

    COMMA           reduce using rule 11 (operator -> EXP .)


state 30

    (12) operator -> MULTIPLY .

    COMMA           reduce using rule 12 (operator -> MULTIPLY .)


state 31

    (14) var_assign -> LET VARIABLE EQUALS . expression
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 36

state 32

    (15) for_loop -> FOR INT IN . INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> FOR INT IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 37


state 33

    (16) for_loop -> FOR VARIABLE IN . INT dDOT INT SB1 algorithm SB2
    (18) for_loop -> FOR VARIABLE IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 38


state 34

    (19) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> WHILE OPEN_P VARIABLE . DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> WHILE OPEN_P VARIABLE . LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> WHILE OPEN_P VARIABLE . LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> WHILE OPEN_P VARIABLE . MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> WHILE OPEN_P VARIABLE . MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> WHILE OPEN_P VARIABLE . EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> WHILE OPEN_P VARIABLE . EQUALS VARIABLE CLOSE_P SB1 expression SB2

    DISTINCT        shift and go to state 39
    LESS_EQUAL      shift and go to state 40
    LESS_THAN       shift and go to state 41
    MORE_EQUAL      shift and go to state 42
    MORE_THAN       shift and go to state 43
    EQUALS_EQUALS   shift and go to state 44
    EQUALS          shift and go to state 45


state 35

    (13) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 46

state 36

    (14) var_assign -> LET VARIABLE EQUALS expression .

    PyC             reduce using rule 14 (var_assign -> LET VARIABLE EQUALS expression .)


state 37

    (15) for_loop -> FOR INT IN INT . dDOT INT SB1 algorithm SB2
    (17) for_loop -> FOR INT IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 47
    dDOT_E          shift and go to state 48


state 38

    (16) for_loop -> FOR VARIABLE IN INT . dDOT INT SB1 algorithm SB2
    (18) for_loop -> FOR VARIABLE IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 49
    dDOT_E          shift and go to state 50


state 39

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . INT CLOSE_P SB1 expression SB2
    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 52
    VARIABLE        shift and go to state 51


state 40

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL . INT CLOSE_P SB1 expression SB2

    INT             shift and go to state 53


state 41

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN . VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 54


state 42

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL . INT CLOSE_P SB1 expression SB2

    INT             shift and go to state 55


state 43

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN . VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 56


state 44

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS . INT CLOSE_P SB1 expression SB2

    INT             shift and go to state 57


state 45

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS . VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 58


state 46

    (13) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P

    COMMA           shift and go to state 59


state 47

    (15) for_loop -> FOR INT IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 60


state 48

    (17) for_loop -> FOR INT IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 61


state 49

    (16) for_loop -> FOR VARIABLE IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 62


state 50

    (18) for_loop -> FOR VARIABLE IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 63


state 51

    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 64


state 52

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 65


state 53

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 66


state 54

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 67


state 55

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 68


state 56

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 69


state 57

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 70


state 58

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 71


state 59

    (13) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 72

state 60

    (15) for_loop -> FOR INT IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 73


state 61

    (17) for_loop -> FOR INT IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 74


state 62

    (16) for_loop -> FOR VARIABLE IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 75


state 63

    (18) for_loop -> FOR VARIABLE IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 76


state 64

    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 77


state 65

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 78


state 66

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 79


state 67

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 80


state 68

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 81


state 69

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 82


state 70

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 83


state 71

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 84


state 72

    (13) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P

    CLOSE_P         shift and go to state 85


state 73

    (15) for_loop -> FOR INT IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (27) empty -> .

    SB2             reduce using rule 27 (empty -> .)
    OPERA           reduce using rule 27 (empty -> .)
    INT             reduce using rule 27 (empty -> .)
    BOOLEAN         reduce using rule 27 (empty -> .)
    VARIABLE        reduce using rule 27 (empty -> .)
    LET             reduce using rule 27 (empty -> .)
    FOR             reduce using rule 27 (empty -> .)
    WHILE           reduce using rule 27 (empty -> .)

    algorithm                      shift and go to state 86
    empty                          shift and go to state 2

state 74

    (17) for_loop -> FOR INT IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (27) empty -> .

    SB2             reduce using rule 27 (empty -> .)
    OPERA           reduce using rule 27 (empty -> .)
    INT             reduce using rule 27 (empty -> .)
    BOOLEAN         reduce using rule 27 (empty -> .)
    VARIABLE        reduce using rule 27 (empty -> .)
    LET             reduce using rule 27 (empty -> .)
    FOR             reduce using rule 27 (empty -> .)
    WHILE           reduce using rule 27 (empty -> .)

    algorithm                      shift and go to state 87
    empty                          shift and go to state 2

state 75

    (16) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (27) empty -> .

    SB2             reduce using rule 27 (empty -> .)
    OPERA           reduce using rule 27 (empty -> .)
    INT             reduce using rule 27 (empty -> .)
    BOOLEAN         reduce using rule 27 (empty -> .)
    VARIABLE        reduce using rule 27 (empty -> .)
    LET             reduce using rule 27 (empty -> .)
    FOR             reduce using rule 27 (empty -> .)
    WHILE           reduce using rule 27 (empty -> .)

    algorithm                      shift and go to state 88
    empty                          shift and go to state 2

state 76

    (18) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (27) empty -> .

    SB2             reduce using rule 27 (empty -> .)
    OPERA           reduce using rule 27 (empty -> .)
    INT             reduce using rule 27 (empty -> .)
    BOOLEAN         reduce using rule 27 (empty -> .)
    VARIABLE        reduce using rule 27 (empty -> .)
    LET             reduce using rule 27 (empty -> .)
    FOR             reduce using rule 27 (empty -> .)
    WHILE           reduce using rule 27 (empty -> .)

    algorithm                      shift and go to state 89
    empty                          shift and go to state 2

state 77

    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 90

state 78

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 91

state 79

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 92

state 80

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 93

state 81

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 94

state 82

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 95

state 83

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 96

state 84

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 . expression SB2
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE

    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11

    expression                     shift and go to state 97

state 85

    (13) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 13 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 13 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 13 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB2             reduce using rule 13 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)


state 86

    (15) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE
    (14) var_assign -> . LET VARIABLE EQUALS expression
    (15) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (19) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 98
    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7

state 87

    (17) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE
    (14) var_assign -> . LET VARIABLE EQUALS expression
    (15) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (19) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 99
    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7

state 88

    (16) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE
    (14) var_assign -> . LET VARIABLE EQUALS expression
    (15) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (19) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 100
    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7

state 89

    (18) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . expression PyC
    (4) algorithm_line -> . var_assign PyC
    (5) algorithm_line -> . for_loop PyC
    (6) algorithm_line -> . while_loop PyC
    (13) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (28) expression -> . INT
    (29) expression -> . BOOLEAN
    (30) expression -> . VARIABLE
    (14) var_assign -> . LET VARIABLE EQUALS expression
    (15) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (16) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (17) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (18) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (19) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2
    (20) while_loop -> . WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2
    (21) while_loop -> . WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2
    (22) while_loop -> . WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2
    (23) while_loop -> . WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2
    (24) while_loop -> . WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2
    (25) while_loop -> . WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2
    (26) while_loop -> . WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 101
    OPERA           shift and go to state 8
    INT             shift and go to state 9
    BOOLEAN         shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    FOR             shift and go to state 13
    WHILE           shift and go to state 14

    algorithm_line                 shift and go to state 3
    expression                     shift and go to state 4
    var_assign                     shift and go to state 5
    for_loop                       shift and go to state 6
    while_loop                     shift and go to state 7

state 90

    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 102


state 91

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 103


state 92

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 104


state 93

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 105


state 94

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 106


state 95

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 107


state 96

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 108


state 97

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression . SB2

    SB2             shift and go to state 109


state 98

    (15) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 15 (for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .)


state 99

    (17) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 17 (for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .)


state 100

    (16) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 16 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .)


state 101

    (18) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 18 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .)


state 102

    (20) while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 20 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2 .)


state 103

    (19) while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 19 (while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2 .)


state 104

    (21) while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 21 (while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 105

    (22) while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 22 (while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 106

    (23) while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 23 (while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2 .)


state 107

    (24) while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 24 (while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2 .)


state 108

    (25) while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 25 (while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2 .)


state 109

    (26) while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 26 (while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2 .)

