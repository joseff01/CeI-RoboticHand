Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTARY

Grammar

Rule 0     S' -> algorithm
Rule 1     algorithm -> algorithm algorithm_line
Rule 2     algorithm -> empty
Rule 3     algorithm_line -> if_else
Rule 4     algorithm_line -> expression PyC
Rule 5     algorithm_line -> var_assign PyC
Rule 6     algorithm_line -> for_loop PyC
Rule 7     algorithm_line -> while_loop PyC
Rule 8     operator -> PLUS
Rule 9     operator -> MINUS
Rule 10    operator -> INT_DIV
Rule 11    operator -> DIVIDE
Rule 12    operator -> EXP
Rule 13    operator -> MULTIPLY
Rule 14    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 15    bool_operator -> EQUALS_EQUALS
Rule 16    bool_operator -> DISTINCT
Rule 17    bool_operator -> LESS_EQUAL
Rule 18    bool_operator -> MORE_EQUAL
Rule 19    bool_operator -> MORE_THAN
Rule 20    bool_operator -> LESS_THAN
Rule 21    expression -> expression bool_operator expression
Rule 22    var_assign -> LET VARIABLE EQUALS expression
Rule 23    for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2
Rule 24    for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
Rule 25    for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2
Rule 26    for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
Rule 27    if_else -> IF expression SB1 statement SB2 else_if
Rule 28    else_if -> ELSE IF expression SB1 statement SB2 else_if
Rule 29    else_if -> else_exp
Rule 30    else_exp -> ELSE SB1 statement SB2
Rule 31    else_exp -> empty
Rule 32    statement -> statement statement_line
Rule 33    statement -> empty
Rule 34    statement_line -> if_else
Rule 35    statement_line -> expression PyC
Rule 36    statement_line -> var_assign PyC
Rule 37    statement_line -> for_loop PyC
Rule 38    statement_line -> while_loop PyC
Rule 39    while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
Rule 40    while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2
Rule 41    empty -> <empty>
Rule 42    expression -> INT
Rule 43    expression -> BOOLEAN
Rule 44    expression -> VARIABLE

Terminals, with rules where they appear

BOOLEAN              : 43
CLOSE_P              : 14 39 40
COMMA                : 14 14
COMMENTARY           : 
DISTINCT             : 16
DIVIDE               : 11
ELSE                 : 28 30
EQUALS               : 22
EQUALS_EQUALS        : 15
EXP                  : 12
FOR                  : 23 24 25 26
IF                   : 27 28
IN                   : 23 24 25 26
INT                  : 23 23 23 24 24 25 25 25 26 26 39 42
INT_DIV              : 10
LESS_EQUAL           : 17
LESS_THAN            : 20
LET                  : 22
MINUS                : 9
MORE_EQUAL           : 18
MORE_THAN            : 19
MULTIPLY             : 13
OPEN_P               : 14 39 40
OPERA                : 14
PLUS                 : 8
PyC                  : 4 5 6 7 35 36 37 38
SB1                  : 23 24 25 26 27 28 30 39 40
SB2                  : 23 24 25 26 27 28 30 39 40
VARIABLE             : 22 24 26 39 40 40 44
WHILE                : 39 40
dDOT                 : 23 24
dDOT_E               : 25 26
error                : 

Nonterminals, with rules where they appear

algorithm            : 1 23 24 25 26 0
algorithm_line       : 1
bool_operator        : 21 39 40
else_exp             : 29
else_if              : 27 28
empty                : 2 31 33
expression           : 4 14 14 21 21 22 27 28 35 39 40
for_loop             : 6 37
if_else              : 3 34
operator             : 14
statement            : 27 28 30 32
statement_line       : 32
var_assign           : 5 36
while_loop           : 7 38

Parsing method: LALR

state 0

    (0) S' -> . algorithm
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (41) empty -> .

    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    $end            reduce using rule 41 (empty -> .)

    algorithm                      shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> algorithm .
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 2

    (2) algorithm -> empty .

    IF              reduce using rule 2 (algorithm -> empty .)
    OPERA           reduce using rule 2 (algorithm -> empty .)
    INT             reduce using rule 2 (algorithm -> empty .)
    BOOLEAN         reduce using rule 2 (algorithm -> empty .)
    VARIABLE        reduce using rule 2 (algorithm -> empty .)
    LET             reduce using rule 2 (algorithm -> empty .)
    FOR             reduce using rule 2 (algorithm -> empty .)
    WHILE           reduce using rule 2 (algorithm -> empty .)
    $end            reduce using rule 2 (algorithm -> empty .)
    SB2             reduce using rule 2 (algorithm -> empty .)


state 3

    (1) algorithm -> algorithm algorithm_line .

    IF              reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    OPERA           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    INT             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    BOOLEAN         reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    VARIABLE        reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    LET             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    FOR             reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    WHILE           reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    $end            reduce using rule 1 (algorithm -> algorithm algorithm_line .)
    SB2             reduce using rule 1 (algorithm -> algorithm algorithm_line .)


state 4

    (3) algorithm_line -> if_else .

    IF              reduce using rule 3 (algorithm_line -> if_else .)
    OPERA           reduce using rule 3 (algorithm_line -> if_else .)
    INT             reduce using rule 3 (algorithm_line -> if_else .)
    BOOLEAN         reduce using rule 3 (algorithm_line -> if_else .)
    VARIABLE        reduce using rule 3 (algorithm_line -> if_else .)
    LET             reduce using rule 3 (algorithm_line -> if_else .)
    FOR             reduce using rule 3 (algorithm_line -> if_else .)
    WHILE           reduce using rule 3 (algorithm_line -> if_else .)
    $end            reduce using rule 3 (algorithm_line -> if_else .)
    SB2             reduce using rule 3 (algorithm_line -> if_else .)


state 5

    (4) algorithm_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 17
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 6

    (5) algorithm_line -> var_assign . PyC

    PyC             shift and go to state 25


state 7

    (6) algorithm_line -> for_loop . PyC

    PyC             shift and go to state 26


state 8

    (7) algorithm_line -> while_loop . PyC

    PyC             shift and go to state 27


state 9

    (27) if_else -> IF . expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 28

state 10

    (14) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 29


state 11

    (42) expression -> INT .

    PyC             reduce using rule 42 (expression -> INT .)
    EQUALS_EQUALS   reduce using rule 42 (expression -> INT .)
    DISTINCT        reduce using rule 42 (expression -> INT .)
    LESS_EQUAL      reduce using rule 42 (expression -> INT .)
    MORE_EQUAL      reduce using rule 42 (expression -> INT .)
    MORE_THAN       reduce using rule 42 (expression -> INT .)
    LESS_THAN       reduce using rule 42 (expression -> INT .)
    SB1             reduce using rule 42 (expression -> INT .)
    COMMA           reduce using rule 42 (expression -> INT .)
    CLOSE_P         reduce using rule 42 (expression -> INT .)
    SB2             reduce using rule 42 (expression -> INT .)


state 12

    (43) expression -> BOOLEAN .

    PyC             reduce using rule 43 (expression -> BOOLEAN .)
    EQUALS_EQUALS   reduce using rule 43 (expression -> BOOLEAN .)
    DISTINCT        reduce using rule 43 (expression -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 43 (expression -> BOOLEAN .)
    MORE_EQUAL      reduce using rule 43 (expression -> BOOLEAN .)
    MORE_THAN       reduce using rule 43 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 43 (expression -> BOOLEAN .)
    SB1             reduce using rule 43 (expression -> BOOLEAN .)
    COMMA           reduce using rule 43 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 43 (expression -> BOOLEAN .)
    SB2             reduce using rule 43 (expression -> BOOLEAN .)


state 13

    (44) expression -> VARIABLE .

    PyC             reduce using rule 44 (expression -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 44 (expression -> VARIABLE .)
    DISTINCT        reduce using rule 44 (expression -> VARIABLE .)
    LESS_EQUAL      reduce using rule 44 (expression -> VARIABLE .)
    MORE_EQUAL      reduce using rule 44 (expression -> VARIABLE .)
    MORE_THAN       reduce using rule 44 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 44 (expression -> VARIABLE .)
    SB1             reduce using rule 44 (expression -> VARIABLE .)
    COMMA           reduce using rule 44 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 44 (expression -> VARIABLE .)
    SB2             reduce using rule 44 (expression -> VARIABLE .)


state 14

    (22) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 30


state 15

    (23) for_loop -> FOR . INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> FOR . VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR . INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> FOR . VARIABLE IN INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 31
    VARIABLE        shift and go to state 32


state 16

    (39) while_loop -> WHILE . OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE . OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    OPEN_P          shift and go to state 33


state 17

    (4) algorithm_line -> expression PyC .

    IF              reduce using rule 4 (algorithm_line -> expression PyC .)
    OPERA           reduce using rule 4 (algorithm_line -> expression PyC .)
    INT             reduce using rule 4 (algorithm_line -> expression PyC .)
    BOOLEAN         reduce using rule 4 (algorithm_line -> expression PyC .)
    VARIABLE        reduce using rule 4 (algorithm_line -> expression PyC .)
    LET             reduce using rule 4 (algorithm_line -> expression PyC .)
    FOR             reduce using rule 4 (algorithm_line -> expression PyC .)
    WHILE           reduce using rule 4 (algorithm_line -> expression PyC .)
    $end            reduce using rule 4 (algorithm_line -> expression PyC .)
    SB2             reduce using rule 4 (algorithm_line -> expression PyC .)


state 18

    (21) expression -> expression bool_operator . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 34

state 19

    (15) bool_operator -> EQUALS_EQUALS .

    OPERA           reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    INT             reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    BOOLEAN         reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 15 (bool_operator -> EQUALS_EQUALS .)


state 20

    (16) bool_operator -> DISTINCT .

    OPERA           reduce using rule 16 (bool_operator -> DISTINCT .)
    INT             reduce using rule 16 (bool_operator -> DISTINCT .)
    BOOLEAN         reduce using rule 16 (bool_operator -> DISTINCT .)
    VARIABLE        reduce using rule 16 (bool_operator -> DISTINCT .)


state 21

    (17) bool_operator -> LESS_EQUAL .

    OPERA           reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    INT             reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    BOOLEAN         reduce using rule 17 (bool_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 17 (bool_operator -> LESS_EQUAL .)


state 22

    (18) bool_operator -> MORE_EQUAL .

    OPERA           reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    INT             reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    BOOLEAN         reduce using rule 18 (bool_operator -> MORE_EQUAL .)
    VARIABLE        reduce using rule 18 (bool_operator -> MORE_EQUAL .)


state 23

    (19) bool_operator -> MORE_THAN .

    OPERA           reduce using rule 19 (bool_operator -> MORE_THAN .)
    INT             reduce using rule 19 (bool_operator -> MORE_THAN .)
    BOOLEAN         reduce using rule 19 (bool_operator -> MORE_THAN .)
    VARIABLE        reduce using rule 19 (bool_operator -> MORE_THAN .)


state 24

    (20) bool_operator -> LESS_THAN .

    OPERA           reduce using rule 20 (bool_operator -> LESS_THAN .)
    INT             reduce using rule 20 (bool_operator -> LESS_THAN .)
    BOOLEAN         reduce using rule 20 (bool_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 20 (bool_operator -> LESS_THAN .)


state 25

    (5) algorithm_line -> var_assign PyC .

    IF              reduce using rule 5 (algorithm_line -> var_assign PyC .)
    OPERA           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    INT             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 5 (algorithm_line -> var_assign PyC .)
    VARIABLE        reduce using rule 5 (algorithm_line -> var_assign PyC .)
    LET             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    FOR             reduce using rule 5 (algorithm_line -> var_assign PyC .)
    WHILE           reduce using rule 5 (algorithm_line -> var_assign PyC .)
    $end            reduce using rule 5 (algorithm_line -> var_assign PyC .)
    SB2             reduce using rule 5 (algorithm_line -> var_assign PyC .)


state 26

    (6) algorithm_line -> for_loop PyC .

    IF              reduce using rule 6 (algorithm_line -> for_loop PyC .)
    OPERA           reduce using rule 6 (algorithm_line -> for_loop PyC .)
    INT             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 6 (algorithm_line -> for_loop PyC .)
    VARIABLE        reduce using rule 6 (algorithm_line -> for_loop PyC .)
    LET             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    FOR             reduce using rule 6 (algorithm_line -> for_loop PyC .)
    WHILE           reduce using rule 6 (algorithm_line -> for_loop PyC .)
    $end            reduce using rule 6 (algorithm_line -> for_loop PyC .)
    SB2             reduce using rule 6 (algorithm_line -> for_loop PyC .)


state 27

    (7) algorithm_line -> while_loop PyC .

    IF              reduce using rule 7 (algorithm_line -> while_loop PyC .)
    OPERA           reduce using rule 7 (algorithm_line -> while_loop PyC .)
    INT             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 7 (algorithm_line -> while_loop PyC .)
    VARIABLE        reduce using rule 7 (algorithm_line -> while_loop PyC .)
    LET             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    FOR             reduce using rule 7 (algorithm_line -> while_loop PyC .)
    WHILE           reduce using rule 7 (algorithm_line -> while_loop PyC .)
    $end            reduce using rule 7 (algorithm_line -> while_loop PyC .)
    SB2             reduce using rule 7 (algorithm_line -> while_loop PyC .)


state 28

    (27) if_else -> IF expression . SB1 statement SB2 else_if
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB1             shift and go to state 35
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 29

    (14) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (8) operator -> . PLUS
    (9) operator -> . MINUS
    (10) operator -> . INT_DIV
    (11) operator -> . DIVIDE
    (12) operator -> . EXP
    (13) operator -> . MULTIPLY

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    INT_DIV         shift and go to state 39
    DIVIDE          shift and go to state 40
    EXP             shift and go to state 41
    MULTIPLY        shift and go to state 42

    operator                       shift and go to state 36

state 30

    (22) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 43


state 31

    (23) for_loop -> FOR INT . IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 44


state 32

    (24) for_loop -> FOR VARIABLE . IN INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE . IN INT dDOT_E INT SB1 algorithm SB2

    IN              shift and go to state 45


state 33

    (39) while_loop -> WHILE OPEN_P . VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P . VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    VARIABLE        shift and go to state 46


state 34

    (21) expression -> expression bool_operator expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for DISTINCT resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_EQUAL resolved as shift
  ! shift/reduce conflict for MORE_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
    PyC             reduce using rule 21 (expression -> expression bool_operator expression .)
    SB1             reduce using rule 21 (expression -> expression bool_operator expression .)
    COMMA           reduce using rule 21 (expression -> expression bool_operator expression .)
    CLOSE_P         reduce using rule 21 (expression -> expression bool_operator expression .)
    SB2             reduce using rule 21 (expression -> expression bool_operator expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

  ! EQUALS_EQUALS   [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! DISTINCT        [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_EQUAL      [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! MORE_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]
  ! LESS_THAN       [ reduce using rule 21 (expression -> expression bool_operator expression .) ]

    bool_operator                  shift and go to state 18

state 35

    (27) if_else -> IF expression SB1 . statement SB2 else_if
    (32) statement -> . statement statement_line
    (33) statement -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    statement                      shift and go to state 47
    empty                          shift and go to state 48

state 36

    (14) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 49


state 37

    (8) operator -> PLUS .

    COMMA           reduce using rule 8 (operator -> PLUS .)


state 38

    (9) operator -> MINUS .

    COMMA           reduce using rule 9 (operator -> MINUS .)


state 39

    (10) operator -> INT_DIV .

    COMMA           reduce using rule 10 (operator -> INT_DIV .)


state 40

    (11) operator -> DIVIDE .

    COMMA           reduce using rule 11 (operator -> DIVIDE .)


state 41

    (12) operator -> EXP .

    COMMA           reduce using rule 12 (operator -> EXP .)


state 42

    (13) operator -> MULTIPLY .

    COMMA           reduce using rule 13 (operator -> MULTIPLY .)


state 43

    (22) var_assign -> LET VARIABLE EQUALS . expression
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 50

state 44

    (23) for_loop -> FOR INT IN . INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 51


state 45

    (24) for_loop -> FOR VARIABLE IN . INT dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN . INT dDOT_E INT SB1 algorithm SB2

    INT             shift and go to state 52


state 46

    (39) while_loop -> WHILE OPEN_P VARIABLE . bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P VARIABLE . bool_operator VARIABLE CLOSE_P SB1 expression SB2
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 53

state 47

    (27) if_else -> IF expression SB1 statement . SB2 else_if
    (32) statement -> statement . statement_line
    (34) statement_line -> . if_else
    (35) statement_line -> . expression PyC
    (36) statement_line -> . var_assign PyC
    (37) statement_line -> . for_loop PyC
    (38) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 55
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    expression                     shift and go to state 54
    statement_line                 shift and go to state 56
    if_else                        shift and go to state 57
    var_assign                     shift and go to state 58
    for_loop                       shift and go to state 59
    while_loop                     shift and go to state 60

state 48

    (33) statement -> empty .

    SB2             reduce using rule 33 (statement -> empty .)
    IF              reduce using rule 33 (statement -> empty .)
    OPERA           reduce using rule 33 (statement -> empty .)
    INT             reduce using rule 33 (statement -> empty .)
    BOOLEAN         reduce using rule 33 (statement -> empty .)
    VARIABLE        reduce using rule 33 (statement -> empty .)
    LET             reduce using rule 33 (statement -> empty .)
    FOR             reduce using rule 33 (statement -> empty .)
    WHILE           reduce using rule 33 (statement -> empty .)


state 49

    (14) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 61

state 50

    (22) var_assign -> LET VARIABLE EQUALS expression .
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             reduce using rule 22 (var_assign -> LET VARIABLE EQUALS expression .)
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 51

    (23) for_loop -> FOR INT IN INT . dDOT INT SB1 algorithm SB2
    (25) for_loop -> FOR INT IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 62
    dDOT_E          shift and go to state 63


state 52

    (24) for_loop -> FOR VARIABLE IN INT . dDOT INT SB1 algorithm SB2
    (26) for_loop -> FOR VARIABLE IN INT . dDOT_E INT SB1 algorithm SB2

    dDOT            shift and go to state 64
    dDOT_E          shift and go to state 65


state 53

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator . INT CLOSE_P SB1 expression SB2
    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator . VARIABLE CLOSE_P SB1 expression SB2

    INT             shift and go to state 67
    VARIABLE        shift and go to state 66


state 54

    (35) statement_line -> expression . PyC
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    PyC             shift and go to state 68
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 55

    (27) if_else -> IF expression SB1 statement SB2 . else_if
    (28) else_if -> . ELSE IF expression SB1 statement SB2 else_if
    (29) else_if -> . else_exp
    (30) else_exp -> . ELSE SB1 statement SB2
    (31) else_exp -> . empty
    (41) empty -> .

    ELSE            shift and go to state 70
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    $end            reduce using rule 41 (empty -> .)
    SB2             reduce using rule 41 (empty -> .)

    else_if                        shift and go to state 69
    else_exp                       shift and go to state 71
    empty                          shift and go to state 72

state 56

    (32) statement -> statement statement_line .

    SB2             reduce using rule 32 (statement -> statement statement_line .)
    IF              reduce using rule 32 (statement -> statement statement_line .)
    OPERA           reduce using rule 32 (statement -> statement statement_line .)
    INT             reduce using rule 32 (statement -> statement statement_line .)
    BOOLEAN         reduce using rule 32 (statement -> statement statement_line .)
    VARIABLE        reduce using rule 32 (statement -> statement statement_line .)
    LET             reduce using rule 32 (statement -> statement statement_line .)
    FOR             reduce using rule 32 (statement -> statement statement_line .)
    WHILE           reduce using rule 32 (statement -> statement statement_line .)


state 57

    (34) statement_line -> if_else .

    SB2             reduce using rule 34 (statement_line -> if_else .)
    IF              reduce using rule 34 (statement_line -> if_else .)
    OPERA           reduce using rule 34 (statement_line -> if_else .)
    INT             reduce using rule 34 (statement_line -> if_else .)
    BOOLEAN         reduce using rule 34 (statement_line -> if_else .)
    VARIABLE        reduce using rule 34 (statement_line -> if_else .)
    LET             reduce using rule 34 (statement_line -> if_else .)
    FOR             reduce using rule 34 (statement_line -> if_else .)
    WHILE           reduce using rule 34 (statement_line -> if_else .)


state 58

    (36) statement_line -> var_assign . PyC

    PyC             shift and go to state 73


state 59

    (37) statement_line -> for_loop . PyC

    PyC             shift and go to state 74


state 60

    (38) statement_line -> while_loop . PyC

    PyC             shift and go to state 75


state 61

    (14) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    COMMA           shift and go to state 76
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 62

    (23) for_loop -> FOR INT IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 77


state 63

    (25) for_loop -> FOR INT IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 78


state 64

    (24) for_loop -> FOR VARIABLE IN INT dDOT . INT SB1 algorithm SB2

    INT             shift and go to state 79


state 65

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E . INT SB1 algorithm SB2

    INT             shift and go to state 80


state 66

    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 81


state 67

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator INT . CLOSE_P SB1 expression SB2

    CLOSE_P         shift and go to state 82


state 68

    (35) statement_line -> expression PyC .

    SB2             reduce using rule 35 (statement_line -> expression PyC .)
    IF              reduce using rule 35 (statement_line -> expression PyC .)
    OPERA           reduce using rule 35 (statement_line -> expression PyC .)
    INT             reduce using rule 35 (statement_line -> expression PyC .)
    BOOLEAN         reduce using rule 35 (statement_line -> expression PyC .)
    VARIABLE        reduce using rule 35 (statement_line -> expression PyC .)
    LET             reduce using rule 35 (statement_line -> expression PyC .)
    FOR             reduce using rule 35 (statement_line -> expression PyC .)
    WHILE           reduce using rule 35 (statement_line -> expression PyC .)


state 69

    (27) if_else -> IF expression SB1 statement SB2 else_if .

    IF              reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    OPERA           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    INT             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    BOOLEAN         reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    VARIABLE        reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    LET             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    FOR             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    WHILE           reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    $end            reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)
    SB2             reduce using rule 27 (if_else -> IF expression SB1 statement SB2 else_if .)


state 70

    (28) else_if -> ELSE . IF expression SB1 statement SB2 else_if
    (30) else_exp -> ELSE . SB1 statement SB2

    IF              shift and go to state 83
    SB1             shift and go to state 84


state 71

    (29) else_if -> else_exp .

    IF              reduce using rule 29 (else_if -> else_exp .)
    OPERA           reduce using rule 29 (else_if -> else_exp .)
    INT             reduce using rule 29 (else_if -> else_exp .)
    BOOLEAN         reduce using rule 29 (else_if -> else_exp .)
    VARIABLE        reduce using rule 29 (else_if -> else_exp .)
    LET             reduce using rule 29 (else_if -> else_exp .)
    FOR             reduce using rule 29 (else_if -> else_exp .)
    WHILE           reduce using rule 29 (else_if -> else_exp .)
    $end            reduce using rule 29 (else_if -> else_exp .)
    SB2             reduce using rule 29 (else_if -> else_exp .)


state 72

    (31) else_exp -> empty .

    IF              reduce using rule 31 (else_exp -> empty .)
    OPERA           reduce using rule 31 (else_exp -> empty .)
    INT             reduce using rule 31 (else_exp -> empty .)
    BOOLEAN         reduce using rule 31 (else_exp -> empty .)
    VARIABLE        reduce using rule 31 (else_exp -> empty .)
    LET             reduce using rule 31 (else_exp -> empty .)
    FOR             reduce using rule 31 (else_exp -> empty .)
    WHILE           reduce using rule 31 (else_exp -> empty .)
    $end            reduce using rule 31 (else_exp -> empty .)
    SB2             reduce using rule 31 (else_exp -> empty .)


state 73

    (36) statement_line -> var_assign PyC .

    SB2             reduce using rule 36 (statement_line -> var_assign PyC .)
    IF              reduce using rule 36 (statement_line -> var_assign PyC .)
    OPERA           reduce using rule 36 (statement_line -> var_assign PyC .)
    INT             reduce using rule 36 (statement_line -> var_assign PyC .)
    BOOLEAN         reduce using rule 36 (statement_line -> var_assign PyC .)
    VARIABLE        reduce using rule 36 (statement_line -> var_assign PyC .)
    LET             reduce using rule 36 (statement_line -> var_assign PyC .)
    FOR             reduce using rule 36 (statement_line -> var_assign PyC .)
    WHILE           reduce using rule 36 (statement_line -> var_assign PyC .)


state 74

    (37) statement_line -> for_loop PyC .

    SB2             reduce using rule 37 (statement_line -> for_loop PyC .)
    IF              reduce using rule 37 (statement_line -> for_loop PyC .)
    OPERA           reduce using rule 37 (statement_line -> for_loop PyC .)
    INT             reduce using rule 37 (statement_line -> for_loop PyC .)
    BOOLEAN         reduce using rule 37 (statement_line -> for_loop PyC .)
    VARIABLE        reduce using rule 37 (statement_line -> for_loop PyC .)
    LET             reduce using rule 37 (statement_line -> for_loop PyC .)
    FOR             reduce using rule 37 (statement_line -> for_loop PyC .)
    WHILE           reduce using rule 37 (statement_line -> for_loop PyC .)


state 75

    (38) statement_line -> while_loop PyC .

    SB2             reduce using rule 38 (statement_line -> while_loop PyC .)
    IF              reduce using rule 38 (statement_line -> while_loop PyC .)
    OPERA           reduce using rule 38 (statement_line -> while_loop PyC .)
    INT             reduce using rule 38 (statement_line -> while_loop PyC .)
    BOOLEAN         reduce using rule 38 (statement_line -> while_loop PyC .)
    VARIABLE        reduce using rule 38 (statement_line -> while_loop PyC .)
    LET             reduce using rule 38 (statement_line -> while_loop PyC .)
    FOR             reduce using rule 38 (statement_line -> while_loop PyC .)
    WHILE           reduce using rule 38 (statement_line -> while_loop PyC .)


state 76

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 85

state 77

    (23) for_loop -> FOR INT IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 86


state 78

    (25) for_loop -> FOR INT IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 87


state 79

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT . SB1 algorithm SB2

    SB1             shift and go to state 88


state 80

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT . SB1 algorithm SB2

    SB1             shift and go to state 89


state 81

    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 90


state 82

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P . SB1 expression SB2

    SB1             shift and go to state 91


state 83

    (28) else_if -> ELSE IF . expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 92

state 84

    (30) else_exp -> ELSE SB1 . statement SB2
    (32) statement -> . statement statement_line
    (33) statement -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    statement                      shift and go to state 93
    empty                          shift and go to state 48

state 85

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    CLOSE_P         shift and go to state 94
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 86

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    algorithm                      shift and go to state 95
    empty                          shift and go to state 2

state 87

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    algorithm                      shift and go to state 96
    empty                          shift and go to state 2

state 88

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    algorithm                      shift and go to state 97
    empty                          shift and go to state 2

state 89

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 . algorithm SB2
    (1) algorithm -> . algorithm algorithm_line
    (2) algorithm -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    algorithm                      shift and go to state 98
    empty                          shift and go to state 2

state 90

    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 99

state 91

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 . expression SB2
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE

    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13

    expression                     shift and go to state 100

state 92

    (28) else_if -> ELSE IF expression . SB1 statement SB2 else_if
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB1             shift and go to state 101
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 93

    (30) else_exp -> ELSE SB1 statement . SB2
    (32) statement -> statement . statement_line
    (34) statement_line -> . if_else
    (35) statement_line -> . expression PyC
    (36) statement_line -> . var_assign PyC
    (37) statement_line -> . for_loop PyC
    (38) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 102
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    statement_line                 shift and go to state 56
    if_else                        shift and go to state 57
    expression                     shift and go to state 54
    var_assign                     shift and go to state 58
    for_loop                       shift and go to state 59
    while_loop                     shift and go to state 60

state 94

    (14) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    EQUALS_EQUALS   reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    DISTINCT        reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_EQUAL      reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    MORE_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    LESS_THAN       reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB1             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    SB2             reduce using rule 14 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)


state 95

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 103
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 96

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 104
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 97

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 105
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 98

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm . SB2
    (1) algorithm -> algorithm . algorithm_line
    (3) algorithm_line -> . if_else
    (4) algorithm_line -> . expression PyC
    (5) algorithm_line -> . var_assign PyC
    (6) algorithm_line -> . for_loop PyC
    (7) algorithm_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 106
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    algorithm_line                 shift and go to state 3
    if_else                        shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    for_loop                       shift and go to state 7
    while_loop                     shift and go to state 8

state 99

    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 107
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 100

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression . SB2
    (21) expression -> expression . bool_operator expression
    (15) bool_operator -> . EQUALS_EQUALS
    (16) bool_operator -> . DISTINCT
    (17) bool_operator -> . LESS_EQUAL
    (18) bool_operator -> . MORE_EQUAL
    (19) bool_operator -> . MORE_THAN
    (20) bool_operator -> . LESS_THAN

    SB2             shift and go to state 108
    EQUALS_EQUALS   shift and go to state 19
    DISTINCT        shift and go to state 20
    LESS_EQUAL      shift and go to state 21
    MORE_EQUAL      shift and go to state 22
    MORE_THAN       shift and go to state 23
    LESS_THAN       shift and go to state 24

    bool_operator                  shift and go to state 18

state 101

    (28) else_if -> ELSE IF expression SB1 . statement SB2 else_if
    (32) statement -> . statement statement_line
    (33) statement -> . empty
    (41) empty -> .

    SB2             reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)

    statement                      shift and go to state 109
    empty                          shift and go to state 48

state 102

    (30) else_exp -> ELSE SB1 statement SB2 .

    IF              reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    OPERA           reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    INT             reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    BOOLEAN         reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    VARIABLE        reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    LET             reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    FOR             reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    WHILE           reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    $end            reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)
    SB2             reduce using rule 30 (else_exp -> ELSE SB1 statement SB2 .)


state 103

    (23) for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 23 (for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2 .)


state 104

    (25) for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 25 (for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2 .)


state 105

    (24) for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .

    PyC             reduce using rule 24 (for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2 .)


state 106

    (26) for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .

    PyC             reduce using rule 26 (for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2 .)


state 107

    (40) while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 40 (while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2 .)


state 108

    (39) while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2 .

    PyC             reduce using rule 39 (while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2 .)


state 109

    (28) else_if -> ELSE IF expression SB1 statement . SB2 else_if
    (32) statement -> statement . statement_line
    (34) statement_line -> . if_else
    (35) statement_line -> . expression PyC
    (36) statement_line -> . var_assign PyC
    (37) statement_line -> . for_loop PyC
    (38) statement_line -> . while_loop PyC
    (27) if_else -> . IF expression SB1 statement SB2 else_if
    (14) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (21) expression -> . expression bool_operator expression
    (42) expression -> . INT
    (43) expression -> . BOOLEAN
    (44) expression -> . VARIABLE
    (22) var_assign -> . LET VARIABLE EQUALS expression
    (23) for_loop -> . FOR INT IN INT dDOT INT SB1 algorithm SB2
    (24) for_loop -> . FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2
    (25) for_loop -> . FOR INT IN INT dDOT_E INT SB1 algorithm SB2
    (26) for_loop -> . FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2
    (39) while_loop -> . WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2
    (40) while_loop -> . WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2

    SB2             shift and go to state 110
    IF              shift and go to state 9
    OPERA           shift and go to state 10
    INT             shift and go to state 11
    BOOLEAN         shift and go to state 12
    VARIABLE        shift and go to state 13
    LET             shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16

    expression                     shift and go to state 54
    statement_line                 shift and go to state 56
    if_else                        shift and go to state 57
    var_assign                     shift and go to state 58
    for_loop                       shift and go to state 59
    while_loop                     shift and go to state 60

state 110

    (28) else_if -> ELSE IF expression SB1 statement SB2 . else_if
    (28) else_if -> . ELSE IF expression SB1 statement SB2 else_if
    (29) else_if -> . else_exp
    (30) else_exp -> . ELSE SB1 statement SB2
    (31) else_exp -> . empty
    (41) empty -> .

    ELSE            shift and go to state 70
    IF              reduce using rule 41 (empty -> .)
    OPERA           reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    BOOLEAN         reduce using rule 41 (empty -> .)
    VARIABLE        reduce using rule 41 (empty -> .)
    LET             reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    $end            reduce using rule 41 (empty -> .)
    SB2             reduce using rule 41 (empty -> .)

    else_if                        shift and go to state 111
    else_exp                       shift and go to state 71
    empty                          shift and go to state 72

state 111

    (28) else_if -> ELSE IF expression SB1 statement SB2 else_if .

    IF              reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    OPERA           reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    INT             reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    BOOLEAN         reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    VARIABLE        reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    LET             reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    FOR             reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    WHILE           reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    $end            reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)
    SB2             reduce using rule 28 (else_if -> ELSE IF expression SB1 statement SB2 else_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 34 resolved as shift
WARNING: shift/reduce conflict for DISTINCT in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for MORE_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
