Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A1
    A2
    A3
    COMMA
    COMMENTARY
    DISTINCT
    EQUALS
    EQUALS_EQUALS
    LESS_EQUAL
    LESS_THAN
    LET
    MORE_EQUAL
    MORE_THAN
    PyC
    VARIABLE

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> OPERA OPEN_P expression PLUS expression CLOSE_P
Rule 5     expression -> OPERA OPEN_P expression MINUS expression CLOSE_P
Rule 6     expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P
Rule 7     expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P
Rule 8     expression -> OPERA OPEN_P expression EXP expression CLOSE_P
Rule 9     expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P
Rule 10    expression -> INT
Rule 11    expression -> BOOLEAN

Terminals, with rules where they appear

A1                   : 
A2                   : 
A3                   : 
BOOLEAN              : 11
CLOSE_P              : 4 5 6 7 8 9
COMMA                : 
COMMENTARY           : 
DISTINCT             : 
DIVIDE               : 7
EQUALS               : 
EQUALS_EQUALS        : 
EXP                  : 8
INT                  : 10
INT_DIV              : 6
LESS_EQUAL           : 
LESS_THAN            : 
LET                  : 
MINUS                : 5
MORE_EQUAL           : 
MORE_THAN            : 
MULTIPLY             : 9
OPEN_P               : 4 5 6 7 8 9
OPERA                : 4 5 6 7 8 9
PLUS                 : 4
PyC                  : 
VARIABLE             : 
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 4 4 5 5 6 6 7 7 8 8 9 9

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN
    (3) empty -> .

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6
    $end            reduce using rule 3 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .

    $end            reduce using rule 1 (calc -> expression .)


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (4) expression -> OPERA . OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> OPERA . OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> OPERA . OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> OPERA . OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> OPERA . OPEN_P expression EXP expression CLOSE_P
    (9) expression -> OPERA . OPEN_P expression MULTIPLY expression CLOSE_P

    OPEN_P          shift and go to state 7


state 5

    (10) expression -> INT .

    $end            reduce using rule 10 (expression -> INT .)
    PLUS            reduce using rule 10 (expression -> INT .)
    MINUS           reduce using rule 10 (expression -> INT .)
    INT_DIV         reduce using rule 10 (expression -> INT .)
    DIVIDE          reduce using rule 10 (expression -> INT .)
    EXP             reduce using rule 10 (expression -> INT .)
    MULTIPLY        reduce using rule 10 (expression -> INT .)
    CLOSE_P         reduce using rule 10 (expression -> INT .)


state 6

    (11) expression -> BOOLEAN .

    $end            reduce using rule 11 (expression -> BOOLEAN .)
    PLUS            reduce using rule 11 (expression -> BOOLEAN .)
    MINUS           reduce using rule 11 (expression -> BOOLEAN .)
    INT_DIV         reduce using rule 11 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 11 (expression -> BOOLEAN .)
    EXP             reduce using rule 11 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 11 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 11 (expression -> BOOLEAN .)


state 7

    (4) expression -> OPERA OPEN_P . expression PLUS expression CLOSE_P
    (5) expression -> OPERA OPEN_P . expression MINUS expression CLOSE_P
    (6) expression -> OPERA OPEN_P . expression INT_DIV expression CLOSE_P
    (7) expression -> OPERA OPEN_P . expression DIVIDE expression CLOSE_P
    (8) expression -> OPERA OPEN_P . expression EXP expression CLOSE_P
    (9) expression -> OPERA OPEN_P . expression MULTIPLY expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 8

state 8

    (4) expression -> OPERA OPEN_P expression . PLUS expression CLOSE_P
    (5) expression -> OPERA OPEN_P expression . MINUS expression CLOSE_P
    (6) expression -> OPERA OPEN_P expression . INT_DIV expression CLOSE_P
    (7) expression -> OPERA OPEN_P expression . DIVIDE expression CLOSE_P
    (8) expression -> OPERA OPEN_P expression . EXP expression CLOSE_P
    (9) expression -> OPERA OPEN_P expression . MULTIPLY expression CLOSE_P

    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT_DIV         shift and go to state 11
    DIVIDE          shift and go to state 12
    EXP             shift and go to state 13
    MULTIPLY        shift and go to state 14


state 9

    (4) expression -> OPERA OPEN_P expression PLUS . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 15

state 10

    (5) expression -> OPERA OPEN_P expression MINUS . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 16

state 11

    (6) expression -> OPERA OPEN_P expression INT_DIV . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 17

state 12

    (7) expression -> OPERA OPEN_P expression DIVIDE . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 18

state 13

    (8) expression -> OPERA OPEN_P expression EXP . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 19

state 14

    (9) expression -> OPERA OPEN_P expression MULTIPLY . expression CLOSE_P
    (4) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (5) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (6) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (10) expression -> . INT
    (11) expression -> . BOOLEAN

    OPERA           shift and go to state 4
    INT             shift and go to state 5
    BOOLEAN         shift and go to state 6

    expression                     shift and go to state 20

state 15

    (4) expression -> OPERA OPEN_P expression PLUS expression . CLOSE_P

    CLOSE_P         shift and go to state 21


state 16

    (5) expression -> OPERA OPEN_P expression MINUS expression . CLOSE_P

    CLOSE_P         shift and go to state 22


state 17

    (6) expression -> OPERA OPEN_P expression INT_DIV expression . CLOSE_P

    CLOSE_P         shift and go to state 23


state 18

    (7) expression -> OPERA OPEN_P expression DIVIDE expression . CLOSE_P

    CLOSE_P         shift and go to state 24


state 19

    (8) expression -> OPERA OPEN_P expression EXP expression . CLOSE_P

    CLOSE_P         shift and go to state 25


state 20

    (9) expression -> OPERA OPEN_P expression MULTIPLY expression . CLOSE_P

    CLOSE_P         shift and go to state 26


state 21

    (4) expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .

    $end            reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    PLUS            reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    MINUS           reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    INT_DIV         reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    DIVIDE          reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    EXP             reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    MULTIPLY        reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    CLOSE_P         reduce using rule 4 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)


state 22

    (5) expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .

    $end            reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    PLUS            reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    MINUS           reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    INT_DIV         reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    DIVIDE          reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    EXP             reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    MULTIPLY        reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    CLOSE_P         reduce using rule 5 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)


state 23

    (6) expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .

    $end            reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    PLUS            reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    MINUS           reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    INT_DIV         reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    DIVIDE          reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    EXP             reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    MULTIPLY        reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    CLOSE_P         reduce using rule 6 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)


state 24

    (7) expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .

    $end            reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    PLUS            reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    MINUS           reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    INT_DIV         reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    DIVIDE          reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    EXP             reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    MULTIPLY        reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    CLOSE_P         reduce using rule 7 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)


state 25

    (8) expression -> OPERA OPEN_P expression EXP expression CLOSE_P .

    $end            reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    PLUS            reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    MINUS           reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    INT_DIV         reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    DIVIDE          reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    EXP             reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    MULTIPLY        reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    CLOSE_P         reduce using rule 8 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)


state 26

    (9) expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .

    $end            reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    PLUS            reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    MINUS           reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    INT_DIV         reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    DIVIDE          reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    EXP             reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    MULTIPLY        reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    CLOSE_P         reduce using rule 9 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)

