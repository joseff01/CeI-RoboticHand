Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A1
    A2
    A3
    COMMA
    COMMENTARY
    DISTINCT
    EQUALS_EQUALS
    LESS_EQUAL
    LESS_THAN
    MORE_EQUAL
    MORE_THAN
    PyC

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     var_assign -> LET VARIABLE EQUALS expression
Rule 5     var_assign -> LET VARIABLE EQUALS VARIABLE
Rule 6     empty -> <empty>
Rule 7     expression -> OPERA OPEN_P expression PLUS expression CLOSE_P
Rule 8     expression -> OPERA OPEN_P expression MINUS expression CLOSE_P
Rule 9     expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P
Rule 10    expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P
Rule 11    expression -> OPERA OPEN_P expression EXP expression CLOSE_P
Rule 12    expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P
Rule 13    expression -> INT
Rule 14    expression -> BOOLEAN

Terminals, with rules where they appear

A1                   : 
A2                   : 
A3                   : 
BOOLEAN              : 14
CLOSE_P              : 7 8 9 10 11 12
COMMA                : 
COMMENTARY           : 
DISTINCT             : 
DIVIDE               : 10
EQUALS               : 4 5
EQUALS_EQUALS        : 
EXP                  : 11
INT                  : 13
INT_DIV              : 9
LESS_EQUAL           : 
LESS_THAN            : 
LET                  : 4 5
MINUS                : 8
MORE_EQUAL           : 
MORE_THAN            : 
MULTIPLY             : 12
OPEN_P               : 7 8 9 10 11 12
OPERA                : 7 8 9 10 11 12
PLUS                 : 7
PyC                  : 
VARIABLE             : 4 5 5
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 7 7 8 8 9 9 10 10 11 11 12 12
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN
    (4) var_assign -> . LET VARIABLE EQUALS expression
    (5) var_assign -> . LET VARIABLE EQUALS VARIABLE
    (6) empty -> .

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7
    LET             shift and go to state 8
    $end            reduce using rule 6 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .

    $end            reduce using rule 1 (calc -> expression .)


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (7) expression -> OPERA . OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> OPERA . OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> OPERA . OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> OPERA . OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> OPERA . OPEN_P expression EXP expression CLOSE_P
    (12) expression -> OPERA . OPEN_P expression MULTIPLY expression CLOSE_P

    OPEN_P          shift and go to state 9


state 6

    (13) expression -> INT .

    $end            reduce using rule 13 (expression -> INT .)
    PLUS            reduce using rule 13 (expression -> INT .)
    MINUS           reduce using rule 13 (expression -> INT .)
    INT_DIV         reduce using rule 13 (expression -> INT .)
    DIVIDE          reduce using rule 13 (expression -> INT .)
    EXP             reduce using rule 13 (expression -> INT .)
    MULTIPLY        reduce using rule 13 (expression -> INT .)
    CLOSE_P         reduce using rule 13 (expression -> INT .)


state 7

    (14) expression -> BOOLEAN .

    $end            reduce using rule 14 (expression -> BOOLEAN .)
    PLUS            reduce using rule 14 (expression -> BOOLEAN .)
    MINUS           reduce using rule 14 (expression -> BOOLEAN .)
    INT_DIV         reduce using rule 14 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 14 (expression -> BOOLEAN .)
    EXP             reduce using rule 14 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 14 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 14 (expression -> BOOLEAN .)


state 8

    (4) var_assign -> LET . VARIABLE EQUALS expression
    (5) var_assign -> LET . VARIABLE EQUALS VARIABLE

    VARIABLE        shift and go to state 10


state 9

    (7) expression -> OPERA OPEN_P . expression PLUS expression CLOSE_P
    (8) expression -> OPERA OPEN_P . expression MINUS expression CLOSE_P
    (9) expression -> OPERA OPEN_P . expression INT_DIV expression CLOSE_P
    (10) expression -> OPERA OPEN_P . expression DIVIDE expression CLOSE_P
    (11) expression -> OPERA OPEN_P . expression EXP expression CLOSE_P
    (12) expression -> OPERA OPEN_P . expression MULTIPLY expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 11

state 10

    (4) var_assign -> LET VARIABLE . EQUALS expression
    (5) var_assign -> LET VARIABLE . EQUALS VARIABLE

    EQUALS          shift and go to state 12


state 11

    (7) expression -> OPERA OPEN_P expression . PLUS expression CLOSE_P
    (8) expression -> OPERA OPEN_P expression . MINUS expression CLOSE_P
    (9) expression -> OPERA OPEN_P expression . INT_DIV expression CLOSE_P
    (10) expression -> OPERA OPEN_P expression . DIVIDE expression CLOSE_P
    (11) expression -> OPERA OPEN_P expression . EXP expression CLOSE_P
    (12) expression -> OPERA OPEN_P expression . MULTIPLY expression CLOSE_P

    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    INT_DIV         shift and go to state 15
    DIVIDE          shift and go to state 16
    EXP             shift and go to state 17
    MULTIPLY        shift and go to state 18


state 12

    (4) var_assign -> LET VARIABLE EQUALS . expression
    (5) var_assign -> LET VARIABLE EQUALS . VARIABLE
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    VARIABLE        shift and go to state 19
    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 20

state 13

    (7) expression -> OPERA OPEN_P expression PLUS . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 21

state 14

    (8) expression -> OPERA OPEN_P expression MINUS . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 22

state 15

    (9) expression -> OPERA OPEN_P expression INT_DIV . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 23

state 16

    (10) expression -> OPERA OPEN_P expression DIVIDE . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 24

state 17

    (11) expression -> OPERA OPEN_P expression EXP . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 25

state 18

    (12) expression -> OPERA OPEN_P expression MULTIPLY . expression CLOSE_P
    (7) expression -> . OPERA OPEN_P expression PLUS expression CLOSE_P
    (8) expression -> . OPERA OPEN_P expression MINUS expression CLOSE_P
    (9) expression -> . OPERA OPEN_P expression INT_DIV expression CLOSE_P
    (10) expression -> . OPERA OPEN_P expression DIVIDE expression CLOSE_P
    (11) expression -> . OPERA OPEN_P expression EXP expression CLOSE_P
    (12) expression -> . OPERA OPEN_P expression MULTIPLY expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7

    expression                     shift and go to state 26

state 19

    (5) var_assign -> LET VARIABLE EQUALS VARIABLE .

    $end            reduce using rule 5 (var_assign -> LET VARIABLE EQUALS VARIABLE .)


state 20

    (4) var_assign -> LET VARIABLE EQUALS expression .

    $end            reduce using rule 4 (var_assign -> LET VARIABLE EQUALS expression .)


state 21

    (7) expression -> OPERA OPEN_P expression PLUS expression . CLOSE_P

    CLOSE_P         shift and go to state 27


state 22

    (8) expression -> OPERA OPEN_P expression MINUS expression . CLOSE_P

    CLOSE_P         shift and go to state 28


state 23

    (9) expression -> OPERA OPEN_P expression INT_DIV expression . CLOSE_P

    CLOSE_P         shift and go to state 29


state 24

    (10) expression -> OPERA OPEN_P expression DIVIDE expression . CLOSE_P

    CLOSE_P         shift and go to state 30


state 25

    (11) expression -> OPERA OPEN_P expression EXP expression . CLOSE_P

    CLOSE_P         shift and go to state 31


state 26

    (12) expression -> OPERA OPEN_P expression MULTIPLY expression . CLOSE_P

    CLOSE_P         shift and go to state 32


state 27

    (7) expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .

    $end            reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    PLUS            reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    MINUS           reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    INT_DIV         reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    DIVIDE          reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    EXP             reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    MULTIPLY        reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)
    CLOSE_P         reduce using rule 7 (expression -> OPERA OPEN_P expression PLUS expression CLOSE_P .)


state 28

    (8) expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .

    $end            reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    PLUS            reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    MINUS           reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    INT_DIV         reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    DIVIDE          reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    EXP             reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    MULTIPLY        reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)
    CLOSE_P         reduce using rule 8 (expression -> OPERA OPEN_P expression MINUS expression CLOSE_P .)


state 29

    (9) expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .

    $end            reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    PLUS            reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    MINUS           reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    INT_DIV         reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    DIVIDE          reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    EXP             reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    MULTIPLY        reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)
    CLOSE_P         reduce using rule 9 (expression -> OPERA OPEN_P expression INT_DIV expression CLOSE_P .)


state 30

    (10) expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .

    $end            reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    PLUS            reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    MINUS           reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    INT_DIV         reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    DIVIDE          reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    EXP             reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    MULTIPLY        reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)
    CLOSE_P         reduce using rule 10 (expression -> OPERA OPEN_P expression DIVIDE expression CLOSE_P .)


state 31

    (11) expression -> OPERA OPEN_P expression EXP expression CLOSE_P .

    $end            reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    PLUS            reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    MINUS           reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    INT_DIV         reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    DIVIDE          reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    EXP             reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    MULTIPLY        reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)
    CLOSE_P         reduce using rule 11 (expression -> OPERA OPEN_P expression EXP expression CLOSE_P .)


state 32

    (12) expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .

    $end            reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    PLUS            reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    MINUS           reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    INT_DIV         reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    DIVIDE          reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    EXP             reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    MULTIPLY        reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)
    CLOSE_P         reduce using rule 12 (expression -> OPERA OPEN_P expression MULTIPLY expression CLOSE_P .)

