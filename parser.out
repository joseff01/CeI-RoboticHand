Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A1
    A2
    A3
    COMMENTARY
    DISTINCT
    EQUALS_EQUALS
    LESS_EQUAL
    LESS_THAN
    MORE_EQUAL
    MORE_THAN

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression PyC
Rule 2     calc -> var_assign PyC
Rule 3     calc -> empty
Rule 4     operator -> PLUS
Rule 5     operator -> MINUS
Rule 6     operator -> INT_DIV
Rule 7     operator -> DIVIDE
Rule 8     operator -> EXP
Rule 9     operator -> MULTIPLY
Rule 10    expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
Rule 11    var_assign -> LET VARIABLE EQUALS expression
Rule 12    empty -> <empty>
Rule 13    expression -> INT
Rule 14    expression -> BOOLEAN
Rule 15    expression -> VARIABLE

Terminals, with rules where they appear

A1                   : 
A2                   : 
A3                   : 
BOOLEAN              : 14
CLOSE_P              : 10
COMMA                : 10 10
COMMENTARY           : 
DISTINCT             : 
DIVIDE               : 7
EQUALS               : 11
EQUALS_EQUALS        : 
EXP                  : 8
INT                  : 13
INT_DIV              : 6
LESS_EQUAL           : 
LESS_THAN            : 
LET                  : 11
MINUS                : 5
MORE_EQUAL           : 
MORE_THAN            : 
MULTIPLY             : 9
OPEN_P               : 10
OPERA                : 10
PLUS                 : 4
PyC                  : 1 2
VARIABLE             : 11 15
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 10 10 11
operator             : 10
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression PyC
    (2) calc -> . var_assign PyC
    (3) calc -> . empty
    (10) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN
    (15) expression -> . VARIABLE
    (11) var_assign -> . LET VARIABLE EQUALS expression
    (12) empty -> .

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7
    VARIABLE        shift and go to state 8
    LET             shift and go to state 9
    $end            reduce using rule 12 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression . PyC

    PyC             shift and go to state 10


state 3

    (2) calc -> var_assign . PyC

    PyC             shift and go to state 11


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (10) expression -> OPERA . OPEN_P operator COMMA expression COMMA expression CLOSE_P

    OPEN_P          shift and go to state 12


state 6

    (13) expression -> INT .

    PyC             reduce using rule 13 (expression -> INT .)
    COMMA           reduce using rule 13 (expression -> INT .)
    CLOSE_P         reduce using rule 13 (expression -> INT .)


state 7

    (14) expression -> BOOLEAN .

    PyC             reduce using rule 14 (expression -> BOOLEAN .)
    COMMA           reduce using rule 14 (expression -> BOOLEAN .)
    CLOSE_P         reduce using rule 14 (expression -> BOOLEAN .)


state 8

    (15) expression -> VARIABLE .

    PyC             reduce using rule 15 (expression -> VARIABLE .)
    COMMA           reduce using rule 15 (expression -> VARIABLE .)
    CLOSE_P         reduce using rule 15 (expression -> VARIABLE .)


state 9

    (11) var_assign -> LET . VARIABLE EQUALS expression

    VARIABLE        shift and go to state 13


state 10

    (1) calc -> expression PyC .

    $end            reduce using rule 1 (calc -> expression PyC .)


state 11

    (2) calc -> var_assign PyC .

    $end            reduce using rule 2 (calc -> var_assign PyC .)


state 12

    (10) expression -> OPERA OPEN_P . operator COMMA expression COMMA expression CLOSE_P
    (4) operator -> . PLUS
    (5) operator -> . MINUS
    (6) operator -> . INT_DIV
    (7) operator -> . DIVIDE
    (8) operator -> . EXP
    (9) operator -> . MULTIPLY

    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    INT_DIV         shift and go to state 17
    DIVIDE          shift and go to state 18
    EXP             shift and go to state 19
    MULTIPLY        shift and go to state 20

    operator                       shift and go to state 14

state 13

    (11) var_assign -> LET VARIABLE . EQUALS expression

    EQUALS          shift and go to state 21


state 14

    (10) expression -> OPERA OPEN_P operator . COMMA expression COMMA expression CLOSE_P

    COMMA           shift and go to state 22


state 15

    (4) operator -> PLUS .

    COMMA           reduce using rule 4 (operator -> PLUS .)


state 16

    (5) operator -> MINUS .

    COMMA           reduce using rule 5 (operator -> MINUS .)


state 17

    (6) operator -> INT_DIV .

    COMMA           reduce using rule 6 (operator -> INT_DIV .)


state 18

    (7) operator -> DIVIDE .

    COMMA           reduce using rule 7 (operator -> DIVIDE .)


state 19

    (8) operator -> EXP .

    COMMA           reduce using rule 8 (operator -> EXP .)


state 20

    (9) operator -> MULTIPLY .

    COMMA           reduce using rule 9 (operator -> MULTIPLY .)


state 21

    (11) var_assign -> LET VARIABLE EQUALS . expression
    (10) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN
    (15) expression -> . VARIABLE

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 23

state 22

    (10) expression -> OPERA OPEN_P operator COMMA . expression COMMA expression CLOSE_P
    (10) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN
    (15) expression -> . VARIABLE

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 24

state 23

    (11) var_assign -> LET VARIABLE EQUALS expression .

    PyC             reduce using rule 11 (var_assign -> LET VARIABLE EQUALS expression .)


state 24

    (10) expression -> OPERA OPEN_P operator COMMA expression . COMMA expression CLOSE_P

    COMMA           shift and go to state 25


state 25

    (10) expression -> OPERA OPEN_P operator COMMA expression COMMA . expression CLOSE_P
    (10) expression -> . OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P
    (13) expression -> . INT
    (14) expression -> . BOOLEAN
    (15) expression -> . VARIABLE

    OPERA           shift and go to state 5
    INT             shift and go to state 6
    BOOLEAN         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 26

state 26

    (10) expression -> OPERA OPEN_P operator COMMA expression COMMA expression . CLOSE_P

    CLOSE_P         shift and go to state 27


state 27

    (10) expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .

    PyC             reduce using rule 10 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    COMMA           reduce using rule 10 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)
    CLOSE_P         reduce using rule 10 (expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P .)

