
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE ELSE EQUALS EQUALS_EQUALS EXP FOR IF IN INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC SB1 SB2 VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n        bool_operator : EQUALS_EQUALS\n                    | DISTINCT\n                    | LESS_EQUAL\n                    | MORE_EQUAL\n                    | MORE_THAN\n                    | LESS_THAN\n    \n    expression : expression bool_operator expression\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2\n              | FOR INT IN INT dDOT_E INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2\n    \n        if_else : IF expression SB1 statement SB2 else_if\n    \n        else_if : ELSE IF expression SB1 statement SB2 else_if\n                | else_exp\n    \n        else_exp : ELSE SB1 statement SB2\n                | empty\n    \n    statement : statement statement_line\n            | empty\n    \n    statement_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    while_loop : WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'IF':([0,1,2,3,4,17,25,26,27,35,47,48,55,56,57,68,69,70,71,72,73,74,75,84,86,87,88,89,93,95,96,97,98,101,102,109,110,111,],[-41,9,-2,-1,-3,-4,-5,-6,-7,-41,9,-33,-41,-32,-34,-35,-27,83,-29,-31,-36,-37,-38,-41,-41,-41,-41,-41,9,9,9,9,9,-41,-30,9,-41,-28,]),'OPERA':([0,1,2,3,4,9,17,18,19,20,21,22,23,24,25,26,27,35,43,47,48,49,55,56,57,68,69,71,72,73,74,75,76,83,84,86,87,88,89,90,91,93,95,96,97,98,101,102,109,110,111,],[-41,10,-2,-1,-3,10,-4,10,-15,-16,-17,-18,-19,-20,-5,-6,-7,-41,10,10,-33,10,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,10,10,-41,-41,-41,-41,-41,10,10,10,10,10,10,10,-41,-30,10,-41,-28,]),'INT':([0,1,2,3,4,9,15,17,18,19,20,21,22,23,24,25,26,27,35,43,44,45,47,48,49,53,55,56,57,62,63,64,65,68,69,71,72,73,74,75,76,83,84,86,87,88,89,90,91,93,95,96,97,98,101,102,109,110,111,],[-41,11,-2,-1,-3,11,31,-4,11,-15,-16,-17,-18,-19,-20,-5,-6,-7,-41,11,51,52,11,-33,11,67,-41,-32,-34,77,78,79,80,-35,-27,-29,-31,-36,-37,-38,11,11,-41,-41,-41,-41,-41,11,11,11,11,11,11,11,-41,-30,11,-41,-28,]),'BOOLEAN':([0,1,2,3,4,9,17,18,19,20,21,22,23,24,25,26,27,35,43,47,48,49,55,56,57,68,69,71,72,73,74,75,76,83,84,86,87,88,89,90,91,93,95,96,97,98,101,102,109,110,111,],[-41,12,-2,-1,-3,12,-4,12,-15,-16,-17,-18,-19,-20,-5,-6,-7,-41,12,12,-33,12,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,12,12,-41,-41,-41,-41,-41,12,12,12,12,12,12,12,-41,-30,12,-41,-28,]),'VARIABLE':([0,1,2,3,4,9,14,15,17,18,19,20,21,22,23,24,25,26,27,33,35,43,47,48,49,53,55,56,57,68,69,71,72,73,74,75,76,83,84,86,87,88,89,90,91,93,95,96,97,98,101,102,109,110,111,],[-41,13,-2,-1,-3,13,30,32,-4,13,-15,-16,-17,-18,-19,-20,-5,-6,-7,46,-41,13,13,-33,13,66,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,13,13,-41,-41,-41,-41,-41,13,13,13,13,13,13,13,-41,-30,13,-41,-28,]),'LET':([0,1,2,3,4,17,25,26,27,35,47,48,55,56,57,68,69,71,72,73,74,75,84,86,87,88,89,93,95,96,97,98,101,102,109,110,111,],[-41,14,-2,-1,-3,-4,-5,-6,-7,-41,14,-33,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,-41,-41,-41,-41,-41,14,14,14,14,14,-41,-30,14,-41,-28,]),'FOR':([0,1,2,3,4,17,25,26,27,35,47,48,55,56,57,68,69,71,72,73,74,75,84,86,87,88,89,93,95,96,97,98,101,102,109,110,111,],[-41,15,-2,-1,-3,-4,-5,-6,-7,-41,15,-33,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,-41,-41,-41,-41,-41,15,15,15,15,15,-41,-30,15,-41,-28,]),'WHILE':([0,1,2,3,4,17,25,26,27,35,47,48,55,56,57,68,69,71,72,73,74,75,84,86,87,88,89,93,95,96,97,98,101,102,109,110,111,],[-41,16,-2,-1,-3,-4,-5,-6,-7,-41,16,-33,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,-41,-41,-41,-41,-41,16,16,16,16,16,-41,-30,16,-41,-28,]),'$end':([0,1,2,3,4,17,25,26,27,55,69,71,72,102,110,111,],[-41,0,-2,-1,-3,-4,-5,-6,-7,-41,-27,-29,-31,-30,-41,-28,]),'SB2':([2,3,4,11,12,13,17,25,26,27,34,35,47,48,55,56,57,68,69,71,72,73,74,75,84,86,87,88,89,93,94,95,96,97,98,99,100,101,102,109,110,111,],[-2,-1,-3,-42,-43,-44,-4,-5,-6,-7,-21,-41,55,-33,-41,-32,-34,-35,-27,-29,-31,-36,-37,-38,-41,-41,-41,-41,-41,102,-14,103,104,105,106,107,108,-41,-30,110,-41,-28,]),'PyC':([5,6,7,8,11,12,13,34,50,54,58,59,60,94,103,104,105,106,107,108,],[17,25,26,27,-42,-43,-44,-21,-22,68,73,74,75,-14,-23,-25,-24,-26,-40,-39,]),'EQUALS_EQUALS':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[19,-42,-43,-44,19,19,19,19,19,19,19,19,-14,19,19,]),'DISTINCT':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[20,-42,-43,-44,20,20,20,20,20,20,20,20,-14,20,20,]),'LESS_EQUAL':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[21,-42,-43,-44,21,21,21,21,21,21,21,21,-14,21,21,]),'MORE_EQUAL':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[22,-42,-43,-44,22,22,22,22,22,22,22,22,-14,22,22,]),'MORE_THAN':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[23,-42,-43,-44,23,23,23,23,23,23,23,23,-14,23,23,]),'LESS_THAN':([5,11,12,13,28,34,46,50,54,61,85,92,94,99,100,],[24,-42,-43,-44,24,24,24,24,24,24,24,24,-14,24,24,]),'OPEN_P':([10,16,],[29,33,]),'SB1':([11,12,13,28,34,70,77,78,79,80,81,82,92,94,],[-42,-43,-44,35,-21,84,86,87,88,89,90,91,101,-14,]),'COMMA':([11,12,13,34,36,37,38,39,40,41,42,61,94,],[-42,-43,-44,-21,49,-8,-9,-10,-11,-12,-13,76,-14,]),'CLOSE_P':([11,12,13,34,66,67,85,94,],[-42,-43,-44,-21,81,82,94,-14,]),'PLUS':([29,],[37,]),'MINUS':([29,],[38,]),'INT_DIV':([29,],[39,]),'DIVIDE':([29,],[40,]),'EXP':([29,],[41,]),'MULTIPLY':([29,],[42,]),'EQUALS':([30,],[43,]),'IN':([31,32,],[44,45,]),'dDOT':([51,52,],[62,64,]),'dDOT_E':([51,52,],[63,65,]),'ELSE':([55,110,],[70,70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,86,87,88,89,],[1,95,96,97,98,]),'empty':([0,35,55,84,86,87,88,89,101,110,],[2,48,72,48,2,2,2,2,48,72,]),'algorithm_line':([1,95,96,97,98,],[3,3,3,3,3,]),'if_else':([1,47,93,95,96,97,98,109,],[4,57,57,4,4,4,4,57,]),'expression':([1,9,18,43,47,49,76,83,90,91,93,95,96,97,98,109,],[5,28,34,50,54,61,85,92,99,100,54,5,5,5,5,54,]),'var_assign':([1,47,93,95,96,97,98,109,],[6,58,58,6,6,6,6,58,]),'for_loop':([1,47,93,95,96,97,98,109,],[7,59,59,7,7,7,7,59,]),'while_loop':([1,47,93,95,96,97,98,109,],[8,60,60,8,8,8,8,60,]),'bool_operator':([5,28,34,46,50,54,61,85,92,99,100,],[18,18,18,53,18,18,18,18,18,18,18,]),'operator':([29,],[36,]),'statement':([35,84,101,],[47,93,109,]),'statement_line':([47,93,109,],[56,56,56,]),'else_if':([55,110,],[69,111,]),'else_exp':([55,110,],[71,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_algorithm','compiler.py',146),
  ('algorithm -> empty','algorithm',1,'p_algorithm','compiler.py',147),
  ('algorithm_line -> if_else','algorithm_line',1,'p_algorithm_line','compiler.py',156),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_algorithm_line','compiler.py',157),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_algorithm_line','compiler.py',158),
  ('algorithm_line -> for_loop PyC','algorithm_line',2,'p_algorithm_line','compiler.py',159),
  ('algorithm_line -> while_loop PyC','algorithm_line',2,'p_algorithm_line','compiler.py',160),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',166),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',167),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',168),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',169),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',170),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',171),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',177),
  ('bool_operator -> EQUALS_EQUALS','bool_operator',1,'p_bool_operator','compiler.py',183),
  ('bool_operator -> DISTINCT','bool_operator',1,'p_bool_operator','compiler.py',184),
  ('bool_operator -> LESS_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',185),
  ('bool_operator -> MORE_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',186),
  ('bool_operator -> MORE_THAN','bool_operator',1,'p_bool_operator','compiler.py',187),
  ('bool_operator -> LESS_THAN','bool_operator',1,'p_bool_operator','compiler.py',188),
  ('expression -> expression bool_operator expression','expression',3,'p_expression_bool','compiler.py',195),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',201),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',209),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',210),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',211),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',212),
  ('if_else -> IF expression SB1 statement SB2 else_if','if_else',6,'p_if_else','compiler.py',219),
  ('else_if -> ELSE IF expression SB1 statement SB2 else_if','else_if',7,'p_else_if','compiler.py',227),
  ('else_if -> else_exp','else_if',1,'p_else_if','compiler.py',228),
  ('else_exp -> ELSE SB1 statement SB2','else_exp',4,'p_else_exp','compiler.py',239),
  ('else_exp -> empty','else_exp',1,'p_else_exp','compiler.py',240),
  ('statement -> statement statement_line','statement',2,'p_statement','compiler.py',252),
  ('statement -> empty','statement',1,'p_statement','compiler.py',253),
  ('statement_line -> if_else','statement_line',1,'p_statement_line','compiler.py',261),
  ('statement_line -> expression PyC','statement_line',2,'p_statement_line','compiler.py',262),
  ('statement_line -> var_assign PyC','statement_line',2,'p_statement_line','compiler.py',263),
  ('statement_line -> for_loop PyC','statement_line',2,'p_statement_line','compiler.py',264),
  ('statement_line -> while_loop PyC','statement_line',2,'p_statement_line','compiler.py',265),
  ('while_loop -> WHILE OPEN_P VARIABLE bool_operator INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',271),
  ('while_loop -> WHILE OPEN_P VARIABLE bool_operator VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',272),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',278),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',285),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',286),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',293),
]
