
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE ELSE EQUALS EQUALS_EQUALS EXP FOR IF IN INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC SB1 SB2 VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop\n                    | while_loop\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n        bool_operator : EQUALS_EQUALS\n                    | DISTINCT\n                    | LESS_EQUAL\n                    | MORE_EQUAL\n                    | MORE_THAN\n                    | LESS_THAN\n    \n    expression : expression bool_operator expression\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 statement SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 statement SB2\n              | FOR INT IN INT dDOT_E INT SB1 statement SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2\n    \n        if_else : IF expression SB1 statement SB2\n    \n    statement : statement statement_line\n            | empty\n    \n    statement_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    while_loop : WHILE OPEN_P expression CLOSE_P SB1 statement SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'IF':([0,1,2,3,4,7,8,17,25,33,45,46,53,54,55,64,65,66,67,68,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,9,-2,-1,-3,-6,-7,-4,-5,-36,9,-29,-27,-28,-30,-36,-31,-32,-33,-34,9,-36,-36,-36,-36,-35,9,9,9,9,-23,-25,-24,-26,]),'OPERA':([0,1,2,3,4,7,8,9,17,18,19,20,21,22,23,24,25,31,33,41,45,46,47,53,54,55,64,65,66,67,68,69,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,10,-2,-1,-3,-6,-7,10,-4,10,-15,-16,-17,-18,-19,-20,-5,10,-36,10,10,-29,10,-27,-28,-30,-36,-31,-32,-33,-34,10,10,-36,-36,-36,-36,-35,10,10,10,10,-23,-25,-24,-26,]),'INT':([0,1,2,3,4,7,8,9,15,17,18,19,20,21,22,23,24,25,31,33,41,42,43,45,46,47,53,54,55,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,11,-2,-1,-3,-6,-7,11,29,-4,11,-15,-16,-17,-18,-19,-20,-5,11,-36,11,49,50,11,-29,11,-27,-28,-30,70,71,72,73,-36,-31,-32,-33,-34,11,11,-36,-36,-36,-36,-35,11,11,11,11,-23,-25,-24,-26,]),'BOOLEAN':([0,1,2,3,4,7,8,9,17,18,19,20,21,22,23,24,25,31,33,41,45,46,47,53,54,55,64,65,66,67,68,69,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,12,-2,-1,-3,-6,-7,12,-4,12,-15,-16,-17,-18,-19,-20,-5,12,-36,12,12,-29,12,-27,-28,-30,-36,-31,-32,-33,-34,12,12,-36,-36,-36,-36,-35,12,12,12,12,-23,-25,-24,-26,]),'VARIABLE':([0,1,2,3,4,7,8,9,14,15,17,18,19,20,21,22,23,24,25,31,33,41,45,46,47,53,54,55,64,65,66,67,68,69,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,13,-2,-1,-3,-6,-7,13,28,30,-4,13,-15,-16,-17,-18,-19,-20,-5,13,-36,13,13,-29,13,-27,-28,-30,-36,-31,-32,-33,-34,13,13,-36,-36,-36,-36,-35,13,13,13,13,-23,-25,-24,-26,]),'LET':([0,1,2,3,4,7,8,17,25,33,45,46,53,54,55,64,65,66,67,68,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,14,-2,-1,-3,-6,-7,-4,-5,-36,14,-29,-27,-28,-30,-36,-31,-32,-33,-34,14,-36,-36,-36,-36,-35,14,14,14,14,-23,-25,-24,-26,]),'FOR':([0,1,2,3,4,7,8,17,25,33,45,46,53,54,55,64,65,66,67,68,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,15,-2,-1,-3,-6,-7,-4,-5,-36,15,-29,-27,-28,-30,-36,-31,-32,-33,-34,15,-36,-36,-36,-36,-35,15,15,15,15,-23,-25,-24,-26,]),'WHILE':([0,1,2,3,4,7,8,17,25,33,45,46,53,54,55,64,65,66,67,68,74,76,77,78,79,80,82,83,84,85,86,87,88,89,],[-36,16,-2,-1,-3,-6,-7,-4,-5,-36,16,-29,-27,-28,-30,-36,-31,-32,-33,-34,16,-36,-36,-36,-36,-35,16,16,16,16,-23,-25,-24,-26,]),'$end':([0,1,2,3,4,7,8,17,25,53,80,86,87,88,89,],[-36,0,-2,-1,-3,-6,-7,-4,-5,-27,-35,-23,-25,-24,-26,]),'PyC':([5,6,11,12,13,32,48,52,56,57,58,80,81,86,87,88,89,],[17,25,-37,-38,-39,-21,-22,65,66,67,68,-35,-14,-23,-25,-24,-26,]),'EQUALS_EQUALS':([5,11,12,13,26,32,44,48,52,59,75,81,],[19,-37,-38,-39,19,19,19,19,19,19,19,-14,]),'DISTINCT':([5,11,12,13,26,32,44,48,52,59,75,81,],[20,-37,-38,-39,20,20,20,20,20,20,20,-14,]),'LESS_EQUAL':([5,11,12,13,26,32,44,48,52,59,75,81,],[21,-37,-38,-39,21,21,21,21,21,21,21,-14,]),'MORE_EQUAL':([5,11,12,13,26,32,44,48,52,59,75,81,],[22,-37,-38,-39,22,22,22,22,22,22,22,-14,]),'MORE_THAN':([5,11,12,13,26,32,44,48,52,59,75,81,],[23,-37,-38,-39,23,23,23,23,23,23,23,-14,]),'LESS_THAN':([5,11,12,13,26,32,44,48,52,59,75,81,],[24,-37,-38,-39,24,24,24,24,24,24,24,-14,]),'OPEN_P':([10,16,],[27,31,]),'SB1':([11,12,13,26,32,51,70,71,72,73,81,],[-37,-38,-39,33,-21,64,76,77,78,79,-14,]),'CLOSE_P':([11,12,13,32,44,75,81,],[-37,-38,-39,-21,51,81,-14,]),'COMMA':([11,12,13,32,34,35,36,37,38,39,40,59,81,],[-37,-38,-39,-21,47,-8,-9,-10,-11,-12,-13,69,-14,]),'PLUS':([27,],[35,]),'MINUS':([27,],[36,]),'INT_DIV':([27,],[37,]),'DIVIDE':([27,],[38,]),'EXP':([27,],[39,]),'MULTIPLY':([27,],[40,]),'EQUALS':([28,],[41,]),'IN':([29,30,],[42,43,]),'SB2':([33,45,46,53,54,55,64,65,66,67,68,74,76,77,78,79,82,83,84,85,],[-36,53,-29,-27,-28,-30,-36,-31,-32,-33,-34,80,-36,-36,-36,-36,86,87,88,89,]),'dDOT':([49,50,],[60,62,]),'dDOT_E':([49,50,],[61,63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,],[1,]),'empty':([0,33,64,76,77,78,79,],[2,46,46,46,46,46,46,]),'algorithm_line':([1,],[3,]),'if_else':([1,45,74,82,83,84,85,],[4,55,55,55,55,55,55,]),'expression':([1,9,18,31,41,45,47,69,74,82,83,84,85,],[5,26,32,44,48,52,59,75,52,52,52,52,52,]),'var_assign':([1,45,74,82,83,84,85,],[6,56,56,56,56,56,56,]),'for_loop':([1,45,74,82,83,84,85,],[7,57,57,57,57,57,57,]),'while_loop':([1,45,74,82,83,84,85,],[8,58,58,58,58,58,58,]),'bool_operator':([5,26,32,44,48,52,59,75,],[18,18,18,18,18,18,18,18,]),'operator':([27,],[34,]),'statement':([33,64,76,77,78,79,],[45,74,82,83,84,85,]),'statement_line':([45,74,82,83,84,85,],[54,54,54,54,54,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_algorithm','compiler.py',146),
  ('algorithm -> empty','algorithm',1,'p_algorithm','compiler.py',147),
  ('algorithm_line -> if_else','algorithm_line',1,'p_algorithm_line','compiler.py',155),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_algorithm_line','compiler.py',156),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_algorithm_line','compiler.py',157),
  ('algorithm_line -> for_loop','algorithm_line',1,'p_algorithm_line','compiler.py',158),
  ('algorithm_line -> while_loop','algorithm_line',1,'p_algorithm_line','compiler.py',159),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',165),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',166),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',167),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',168),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',169),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',170),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',176),
  ('bool_operator -> EQUALS_EQUALS','bool_operator',1,'p_bool_operator','compiler.py',182),
  ('bool_operator -> DISTINCT','bool_operator',1,'p_bool_operator','compiler.py',183),
  ('bool_operator -> LESS_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',184),
  ('bool_operator -> MORE_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',185),
  ('bool_operator -> MORE_THAN','bool_operator',1,'p_bool_operator','compiler.py',186),
  ('bool_operator -> LESS_THAN','bool_operator',1,'p_bool_operator','compiler.py',187),
  ('expression -> expression bool_operator expression','expression',3,'p_expression_bool','compiler.py',194),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',200),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 statement SB2','for_loop',9,'p_for_loop','compiler.py',208),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 statement SB2','for_loop',9,'p_for_loop','compiler.py',209),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 statement SB2','for_loop',9,'p_for_loop','compiler.py',210),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 statement SB2','for_loop',9,'p_for_loop','compiler.py',211),
  ('if_else -> IF expression SB1 statement SB2','if_else',5,'p_if_else','compiler.py',218),
  ('statement -> statement statement_line','statement',2,'p_statement','compiler.py',225),
  ('statement -> empty','statement',1,'p_statement','compiler.py',226),
  ('statement_line -> if_else','statement_line',1,'p_statement_line','compiler.py',233),
  ('statement_line -> expression PyC','statement_line',2,'p_statement_line','compiler.py',234),
  ('statement_line -> var_assign PyC','statement_line',2,'p_statement_line','compiler.py',235),
  ('statement_line -> for_loop PyC','statement_line',2,'p_statement_line','compiler.py',236),
  ('statement_line -> while_loop PyC','statement_line',2,'p_statement_line','compiler.py',237),
  ('while_loop -> WHILE OPEN_P expression CLOSE_P SB1 statement SB2','while_loop',7,'p_while_loop','compiler.py',243),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',249),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',256),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',257),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',264),
]
