
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A1 A2 A3 BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE EQUALS EQUALS_EQUALS EXP INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC VARIABLE\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : expression PyC\n                    | var_assign PyC\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'OPERA':([0,1,2,3,11,12,22,23,26,],[-13,6,-2,-1,-3,-4,6,6,6,]),'INT':([0,1,2,3,11,12,22,23,26,],[-13,7,-2,-1,-3,-4,7,7,7,]),'BOOLEAN':([0,1,2,3,11,12,22,23,26,],[-13,8,-2,-1,-3,-4,8,8,8,]),'VARIABLE':([0,1,2,3,10,11,12,22,23,26,],[-13,9,-2,-1,14,-3,-4,9,9,9,]),'LET':([0,1,2,3,11,12,],[-13,10,-2,-1,-3,-4,]),'$end':([0,1,2,3,11,12,],[-13,0,-2,-1,-3,-4,]),'PyC':([4,5,7,8,9,24,28,],[11,12,-14,-15,-16,-12,-11,]),'OPEN_P':([6,],[13,]),'COMMA':([7,8,9,15,16,17,18,19,20,21,25,28,],[-14,-15,-16,23,-5,-6,-7,-8,-9,-10,26,-11,]),'CLOSE_P':([7,8,9,27,28,],[-14,-15,-16,28,-11,]),'PLUS':([13,],[16,]),'MINUS':([13,],[17,]),'INT_DIV':([13,],[18,]),'DIVIDE':([13,],[19,]),'EXP':([13,],[20,]),'MULTIPLY':([13,],[21,]),'EQUALS':([14,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,],[1,]),'empty':([0,],[2,]),'algorithm_line':([1,],[3,]),'expression':([1,22,23,26,],[4,24,25,27,]),'var_assign':([1,],[5,]),'operator':([13,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_lines','compiler.py',108),
  ('algorithm -> empty','algorithm',1,'p_lines','compiler.py',109),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_first_section','compiler.py',114),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_first_section','compiler.py',115),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',121),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',122),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',123),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',124),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',125),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',126),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',132),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',139),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',147),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',154),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',155),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',162),
]
