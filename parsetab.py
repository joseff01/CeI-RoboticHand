
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE ELSE EQUALS EQUALS_EQUALS EXP FOR IF IN INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC SB1 SB2 VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n                    | if_else\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n        bool_operator : EQUALS_EQUALS\n                    | DISTINCT\n                    | LESS_EQUAL\n                    | MORE_EQUAL\n                    | MORE_THAN\n                    | LESS_THAN\n    \n    expression : expression bool_operator expression\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2\n              | FOR INT IN INT dDOT_E INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2\n    \n        if_else : IF expression SB1 algorithm SB2\n    \n    while_loop : WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'OPERA':([0,1,2,3,8,16,17,18,19,20,21,22,23,24,25,26,27,42,46,47,58,78,79,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,],[-42,9,-2,-1,-7,9,-3,9,-15,-16,-17,-18,-19,-20,-4,-5,-6,9,-42,9,9,-27,9,-42,-42,-42,-42,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'INT':([0,1,2,3,8,14,16,17,18,19,20,21,22,23,24,25,26,27,42,43,44,46,47,51,52,53,54,55,56,57,58,60,61,62,63,78,79,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,],[-42,10,-2,-1,-7,30,10,-3,10,-15,-16,-17,-18,-19,-20,-4,-5,-6,10,49,50,-42,10,65,67,69,71,73,75,77,10,80,81,82,83,-27,10,-42,-42,-42,-42,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'BOOLEAN':([0,1,2,3,8,16,17,18,19,20,21,22,23,24,25,26,27,42,46,47,58,78,79,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,],[-42,11,-2,-1,-7,11,-3,11,-15,-16,-17,-18,-19,-20,-4,-5,-6,11,-42,11,11,-27,11,-42,-42,-42,-42,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'VARIABLE':([0,1,2,3,8,13,14,16,17,18,19,20,21,22,23,24,25,26,27,32,42,46,47,51,52,53,54,55,56,57,58,78,79,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,],[-42,12,-2,-1,-7,29,31,12,-3,12,-15,-16,-17,-18,-19,-20,-4,-5,-6,45,12,-42,12,64,66,68,70,72,74,76,12,-27,12,-42,-42,-42,-42,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LET':([0,1,2,3,8,17,25,26,27,46,58,78,99,100,101,102,118,119,120,121,],[-42,13,-2,-1,-7,-3,-4,-5,-6,-42,13,-27,-42,-42,-42,-42,13,13,13,13,]),'FOR':([0,1,2,3,8,17,25,26,27,46,58,78,99,100,101,102,118,119,120,121,],[-42,14,-2,-1,-7,-3,-4,-5,-6,-42,14,-27,-42,-42,-42,-42,14,14,14,14,]),'WHILE':([0,1,2,3,8,17,25,26,27,46,58,78,99,100,101,102,118,119,120,121,],[-42,15,-2,-1,-7,-3,-4,-5,-6,-42,15,-27,-42,-42,-42,-42,15,15,15,15,]),'IF':([0,1,2,3,8,17,25,26,27,46,58,78,99,100,101,102,118,119,120,121,],[-42,16,-2,-1,-7,-3,-4,-5,-6,-42,16,-27,-42,-42,-42,-42,16,16,16,16,]),'$end':([0,1,2,3,8,17,25,26,27,78,],[-42,0,-2,-1,-7,-3,-4,-5,-6,-27,]),'SB2':([2,3,8,10,11,12,17,25,26,27,34,46,58,78,99,100,101,102,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[-2,-1,-7,-43,-44,-45,-3,-4,-5,-6,-21,-42,78,-27,-42,-42,-42,-42,-14,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,]),'PyC':([4,5,6,7,10,11,12,34,48,117,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,],[17,25,26,27,-43,-44,-45,-21,-22,-14,-23,-25,-24,-26,-29,-28,-31,-30,-33,-32,-35,-34,-37,-36,-39,-38,-41,-40,]),'EQUALS_EQUALS':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[19,-43,-44,-45,19,19,56,19,19,19,-14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'DISTINCT':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[20,-43,-44,-45,20,20,51,20,20,20,-14,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LESS_EQUAL':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[21,-43,-44,-45,21,21,52,21,21,21,-14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MORE_EQUAL':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[22,-43,-44,-45,22,22,54,22,22,22,-14,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MORE_THAN':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[23,-43,-44,-45,23,23,55,23,23,23,-14,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LESS_THAN':([4,10,11,12,33,34,45,48,59,98,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[24,-43,-44,-45,24,24,53,24,24,24,-14,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'OPEN_P':([9,15,],[28,32,]),'SB1':([10,11,12,33,34,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,117,],[-43,-44,-45,46,-21,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,-14,]),'COMMA':([10,11,12,34,35,36,37,38,39,40,41,59,117,],[-43,-44,-45,-21,47,-8,-9,-10,-11,-12,-13,79,-14,]),'CLOSE_P':([10,11,12,34,64,65,66,67,68,69,70,71,72,73,74,75,76,77,98,117,],[-43,-44,-45,-21,84,85,86,87,88,89,90,91,92,93,94,95,96,97,117,-14,]),'PLUS':([28,],[36,]),'MINUS':([28,],[37,]),'INT_DIV':([28,],[38,]),'DIVIDE':([28,],[39,]),'EXP':([28,],[40,]),'MULTIPLY':([28,],[41,]),'EQUALS':([29,45,],[42,57,]),'IN':([30,31,],[43,44,]),'dDOT':([49,50,],[60,62,]),'dDOT_E':([49,50,],[61,63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,46,99,100,101,102,],[1,58,118,119,120,121,]),'empty':([0,46,99,100,101,102,],[2,2,2,2,2,2,]),'algorithm_line':([1,58,118,119,120,121,],[3,3,3,3,3,3,]),'expression':([1,16,18,42,47,58,79,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,],[4,33,34,48,59,4,98,122,123,124,125,126,127,128,129,130,131,132,133,134,135,4,4,4,4,]),'var_assign':([1,58,118,119,120,121,],[5,5,5,5,5,5,]),'for_loop':([1,58,118,119,120,121,],[6,6,6,6,6,6,]),'while_loop':([1,58,118,119,120,121,],[7,7,7,7,7,7,]),'if_else':([1,58,118,119,120,121,],[8,8,8,8,8,8,]),'bool_operator':([4,33,34,48,59,98,122,123,124,125,126,127,128,129,130,131,132,133,134,135,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'operator':([28,],[35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_lines','compiler.py',146),
  ('algorithm -> empty','algorithm',1,'p_lines','compiler.py',147),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_first_section','compiler.py',153),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_first_section','compiler.py',154),
  ('algorithm_line -> for_loop PyC','algorithm_line',2,'p_first_section','compiler.py',155),
  ('algorithm_line -> while_loop PyC','algorithm_line',2,'p_first_section','compiler.py',156),
  ('algorithm_line -> if_else','algorithm_line',1,'p_first_section','compiler.py',157),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',164),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',165),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',166),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',167),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',168),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',169),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',175),
  ('bool_operator -> EQUALS_EQUALS','bool_operator',1,'p_bool_operator','compiler.py',181),
  ('bool_operator -> DISTINCT','bool_operator',1,'p_bool_operator','compiler.py',182),
  ('bool_operator -> LESS_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',183),
  ('bool_operator -> MORE_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',184),
  ('bool_operator -> MORE_THAN','bool_operator',1,'p_bool_operator','compiler.py',185),
  ('bool_operator -> LESS_THAN','bool_operator',1,'p_bool_operator','compiler.py',186),
  ('expression -> expression bool_operator expression','expression',3,'p_expression_bool','compiler.py',193),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',199),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',207),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',208),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',209),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',210),
  ('if_else -> IF expression SB1 algorithm SB2','if_else',5,'p_if_else','compiler.py',217),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',223),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',224),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',225),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',226),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',227),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',228),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',229),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',230),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',231),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',232),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',233),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',234),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',235),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',236),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',242),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',249),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',250),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',257),
]
