
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A1 A2 A3 BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE EQUALS EQUALS_EQUALS EXP FOR IN INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC SB1 SB2 VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2\n              | FOR INT IN INT dDOT_E INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2\n    \n    while_loop : WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'OPERA':([0,1,2,3,15,16,17,18,31,35,59,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,],[-27,8,-2,-1,-3,-4,-5,-6,8,8,8,-27,-27,-27,-27,8,8,8,8,8,8,8,8,8,8,8,8,]),'INT':([0,1,2,3,13,15,16,17,18,31,32,33,35,39,40,42,44,47,48,49,50,59,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,],[-27,9,-2,-1,21,-3,-4,-5,-6,9,37,38,9,52,53,55,57,60,61,62,63,9,-27,-27,-27,-27,9,9,9,9,9,9,9,9,9,9,9,9,]),'BOOLEAN':([0,1,2,3,15,16,17,18,31,35,59,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,],[-27,10,-2,-1,-3,-4,-5,-6,10,10,10,-27,-27,-27,-27,10,10,10,10,10,10,10,10,10,10,10,10,]),'VARIABLE':([0,1,2,3,12,13,15,16,17,18,23,31,35,39,41,43,45,59,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,],[-27,11,-2,-1,20,22,-3,-4,-5,-6,34,11,11,51,54,56,58,11,-27,-27,-27,-27,11,11,11,11,11,11,11,11,11,11,11,11,]),'LET':([0,1,2,3,15,16,17,18,73,74,75,76,86,87,88,89,],[-27,12,-2,-1,-3,-4,-5,-6,-27,-27,-27,-27,12,12,12,12,]),'FOR':([0,1,2,3,15,16,17,18,73,74,75,76,86,87,88,89,],[-27,13,-2,-1,-3,-4,-5,-6,-27,-27,-27,-27,13,13,13,13,]),'WHILE':([0,1,2,3,15,16,17,18,73,74,75,76,86,87,88,89,],[-27,14,-2,-1,-3,-4,-5,-6,-27,-27,-27,-27,14,14,14,14,]),'$end':([0,1,2,3,15,16,17,18,],[-27,0,-2,-1,-3,-4,-5,-6,]),'SB2':([2,3,9,10,11,15,16,17,18,73,74,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,],[-2,-1,-28,-29,-30,-3,-4,-5,-6,-27,-27,-27,-27,-13,98,99,100,101,102,103,104,105,106,107,108,109,]),'PyC':([4,5,6,7,9,10,11,36,85,98,99,100,101,102,103,104,105,106,107,108,109,],[15,16,17,18,-28,-29,-30,-14,-13,-15,-17,-16,-18,-20,-19,-21,-22,-23,-24,-25,-26,]),'OPEN_P':([8,14,],[19,23,]),'COMMA':([9,10,11,24,25,26,27,28,29,30,46,85,],[-28,-29,-30,35,-7,-8,-9,-10,-11,-12,59,-13,]),'CLOSE_P':([9,10,11,51,52,53,54,55,56,57,58,72,85,],[-28,-29,-30,64,65,66,67,68,69,70,71,85,-13,]),'PLUS':([19,],[25,]),'MINUS':([19,],[26,]),'INT_DIV':([19,],[27,]),'DIVIDE':([19,],[28,]),'EXP':([19,],[29,]),'MULTIPLY':([19,],[30,]),'EQUALS':([20,34,],[31,45,]),'IN':([21,22,],[32,33,]),'DISTINCT':([34,],[39,]),'LESS_EQUAL':([34,],[40,]),'LESS_THAN':([34,],[41,]),'MORE_EQUAL':([34,],[42,]),'MORE_THAN':([34,],[43,]),'EQUALS_EQUALS':([34,],[44,]),'dDOT':([37,38,],[47,49,]),'dDOT_E':([37,38,],[48,50,]),'SB1':([60,61,62,63,64,65,66,67,68,69,70,71,],[73,74,75,76,77,78,79,80,81,82,83,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,73,74,75,76,],[1,86,87,88,89,]),'empty':([0,73,74,75,76,],[2,2,2,2,2,]),'algorithm_line':([1,86,87,88,89,],[3,3,3,3,3,]),'expression':([1,31,35,59,77,78,79,80,81,82,83,84,86,87,88,89,],[4,36,46,72,90,91,92,93,94,95,96,97,4,4,4,4,]),'var_assign':([1,86,87,88,89,],[5,5,5,5,5,]),'for_loop':([1,86,87,88,89,],[6,6,6,6,6,]),'while_loop':([1,86,87,88,89,],[7,7,7,7,7,]),'operator':([19,],[24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_lines','compiler.py',139),
  ('algorithm -> empty','algorithm',1,'p_lines','compiler.py',140),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_first_section','compiler.py',147),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_first_section','compiler.py',148),
  ('algorithm_line -> for_loop PyC','algorithm_line',2,'p_first_section','compiler.py',149),
  ('algorithm_line -> while_loop PyC','algorithm_line',2,'p_first_section','compiler.py',150),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',157),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',158),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',159),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',160),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',161),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',162),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',168),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',175),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',183),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',184),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',185),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',186),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',193),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',194),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',195),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',196),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',197),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',198),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',199),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',200),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',206),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',213),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',214),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',221),
]
