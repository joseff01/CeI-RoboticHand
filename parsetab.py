
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CLOSE_P COMMA COMMENTARY DISTINCT DIVIDE ELSE EQUALS EQUALS_EQUALS EXP FOR IF IN INT INT_DIV LESS_EQUAL LESS_THAN LET MINUS MORE_EQUAL MORE_THAN MULTIPLY OPEN_P OPERA PLUS PyC SB1 SB2 VARIABLE WHILE dDOT dDOT_E\n    algorithm : algorithm algorithm_line\n            | empty\n    \n    algorithm_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    operator : PLUS\n            | MINUS\n            | INT_DIV\n            | DIVIDE\n            | EXP\n            | MULTIPLY\n    \n    expression : OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P\n    \n        bool_operator : EQUALS_EQUALS\n                    | DISTINCT\n                    | LESS_EQUAL\n                    | MORE_EQUAL\n                    | MORE_THAN\n                    | LESS_THAN\n    \n    expression : expression bool_operator expression\n    \n    var_assign : LET VARIABLE EQUALS expression\n    \n    for_loop : FOR INT IN INT dDOT INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2\n              | FOR INT IN INT dDOT_E INT SB1 algorithm SB2\n              | FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2\n    \n        if_else : IF expression SB1 statement SB2\n    \n    statement : statement statement_line\n            | empty\n    \n    statement_line : if_else\n                    | expression PyC\n                    | var_assign PyC\n                    | for_loop PyC\n                    | while_loop PyC\n    \n    while_loop : WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2\n               | WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2\n    \n    empty :\n    \n    expression : INT\n              | BOOLEAN\n    \n    expression : VARIABLE\n    '
    
_lr_action_items = {'IF':([0,1,2,3,4,17,25,26,27,35,47,48,61,62,63,86,87,88,89,110,111,112,113,129,130,131,132,],[-49,9,-2,-1,-3,-4,-5,-6,-7,-49,9,-29,-27,-28,-30,-31,-32,-33,-34,-49,-49,-49,-49,9,9,9,9,]),'OPERA':([0,1,2,3,4,9,17,18,19,20,21,22,23,24,25,26,27,35,43,47,48,49,61,62,63,86,87,88,89,90,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,],[-49,10,-2,-1,-3,10,-4,10,-15,-16,-17,-18,-19,-20,-5,-6,-7,-49,10,10,-29,10,-27,-28,-30,-31,-32,-33,-34,10,-49,-49,-49,-49,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INT':([0,1,2,3,4,9,15,17,18,19,20,21,22,23,24,25,26,27,35,43,44,45,47,48,49,53,54,55,56,57,58,59,61,62,63,68,69,70,71,86,87,88,89,90,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,],[-49,11,-2,-1,-3,11,31,-4,11,-15,-16,-17,-18,-19,-20,-5,-6,-7,-49,11,51,52,11,-29,11,73,75,77,79,81,83,85,-27,-28,-30,91,92,93,94,-31,-32,-33,-34,11,-49,-49,-49,-49,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'BOOLEAN':([0,1,2,3,4,9,17,18,19,20,21,22,23,24,25,26,27,35,43,47,48,49,61,62,63,86,87,88,89,90,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,],[-49,12,-2,-1,-3,12,-4,12,-15,-16,-17,-18,-19,-20,-5,-6,-7,-49,12,12,-29,12,-27,-28,-30,-31,-32,-33,-34,12,-49,-49,-49,-49,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'VARIABLE':([0,1,2,3,4,9,14,15,17,18,19,20,21,22,23,24,25,26,27,33,35,43,47,48,49,53,54,55,56,57,58,59,61,62,63,86,87,88,89,90,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,],[-49,13,-2,-1,-3,13,30,32,-4,13,-15,-16,-17,-18,-19,-20,-5,-6,-7,46,-49,13,13,-29,13,72,74,76,78,80,82,84,-27,-28,-30,-31,-32,-33,-34,13,-49,-49,-49,-49,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LET':([0,1,2,3,4,17,25,26,27,35,47,48,61,62,63,86,87,88,89,110,111,112,113,129,130,131,132,],[-49,14,-2,-1,-3,-4,-5,-6,-7,-49,14,-29,-27,-28,-30,-31,-32,-33,-34,-49,-49,-49,-49,14,14,14,14,]),'FOR':([0,1,2,3,4,17,25,26,27,35,47,48,61,62,63,86,87,88,89,110,111,112,113,129,130,131,132,],[-49,15,-2,-1,-3,-4,-5,-6,-7,-49,15,-29,-27,-28,-30,-31,-32,-33,-34,-49,-49,-49,-49,15,15,15,15,]),'WHILE':([0,1,2,3,4,17,25,26,27,35,47,48,61,62,63,86,87,88,89,110,111,112,113,129,130,131,132,],[-49,16,-2,-1,-3,-4,-5,-6,-7,-49,16,-29,-27,-28,-30,-31,-32,-33,-34,-49,-49,-49,-49,16,16,16,16,]),'$end':([0,1,2,3,4,17,25,26,27,61,],[-49,0,-2,-1,-3,-4,-5,-6,-7,-27,]),'SB2':([2,3,4,11,12,13,17,25,26,27,34,35,47,48,61,62,63,86,87,88,89,110,111,112,113,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[-2,-1,-3,-50,-51,-52,-4,-5,-6,-7,-21,-49,61,-29,-27,-28,-30,-31,-32,-33,-34,-49,-49,-49,-49,-14,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,]),'PyC':([5,6,7,8,11,12,13,34,50,60,64,65,66,128,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,],[17,25,26,27,-50,-51,-52,-21,-22,86,87,88,89,-14,-23,-25,-24,-26,-36,-35,-38,-37,-40,-39,-42,-41,-44,-43,-46,-45,-48,-47,]),'EQUALS_EQUALS':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[19,-50,-51,-52,19,19,58,19,19,19,19,-14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'DISTINCT':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[20,-50,-51,-52,20,20,53,20,20,20,20,-14,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LESS_EQUAL':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[21,-50,-51,-52,21,21,54,21,21,21,21,-14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MORE_EQUAL':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[22,-50,-51,-52,22,22,56,22,22,22,22,-14,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MORE_THAN':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[23,-50,-51,-52,23,23,57,23,23,23,23,-14,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LESS_THAN':([5,11,12,13,28,34,46,50,60,67,109,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[24,-50,-51,-52,24,24,55,24,24,24,24,-14,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'OPEN_P':([10,16,],[29,33,]),'SB1':([11,12,13,28,34,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,128,],[-50,-51,-52,35,-21,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,-14,]),'COMMA':([11,12,13,34,36,37,38,39,40,41,42,67,128,],[-50,-51,-52,-21,49,-8,-9,-10,-11,-12,-13,90,-14,]),'CLOSE_P':([11,12,13,34,72,73,74,75,76,77,78,79,80,81,82,83,84,85,109,128,],[-50,-51,-52,-21,95,96,97,98,99,100,101,102,103,104,105,106,107,108,128,-14,]),'PLUS':([29,],[37,]),'MINUS':([29,],[38,]),'INT_DIV':([29,],[39,]),'DIVIDE':([29,],[40,]),'EXP':([29,],[41,]),'MULTIPLY':([29,],[42,]),'EQUALS':([30,46,],[43,59,]),'IN':([31,32,],[44,45,]),'dDOT':([51,52,],[68,70,]),'dDOT_E':([51,52,],[69,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'algorithm':([0,110,111,112,113,],[1,129,130,131,132,]),'empty':([0,35,110,111,112,113,],[2,48,2,2,2,2,]),'algorithm_line':([1,129,130,131,132,],[3,3,3,3,3,]),'if_else':([1,47,129,130,131,132,],[4,63,4,4,4,4,]),'expression':([1,9,18,43,47,49,90,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,],[5,28,34,50,60,67,109,133,134,135,136,137,138,139,140,141,142,143,144,145,146,5,5,5,5,]),'var_assign':([1,47,129,130,131,132,],[6,64,6,6,6,6,]),'for_loop':([1,47,129,130,131,132,],[7,65,7,7,7,7,]),'while_loop':([1,47,129,130,131,132,],[8,66,8,8,8,8,]),'bool_operator':([5,28,34,50,60,67,109,133,134,135,136,137,138,139,140,141,142,143,144,145,146,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'operator':([29,],[36,]),'statement':([35,],[47,]),'statement_line':([47,],[62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> algorithm","S'",1,None,None,None),
  ('algorithm -> algorithm algorithm_line','algorithm',2,'p_algorithm','compiler.py',146),
  ('algorithm -> empty','algorithm',1,'p_algorithm','compiler.py',147),
  ('algorithm_line -> if_else','algorithm_line',1,'p_algorithm_line','compiler.py',156),
  ('algorithm_line -> expression PyC','algorithm_line',2,'p_algorithm_line','compiler.py',157),
  ('algorithm_line -> var_assign PyC','algorithm_line',2,'p_algorithm_line','compiler.py',158),
  ('algorithm_line -> for_loop PyC','algorithm_line',2,'p_algorithm_line','compiler.py',159),
  ('algorithm_line -> while_loop PyC','algorithm_line',2,'p_algorithm_line','compiler.py',160),
  ('operator -> PLUS','operator',1,'p_operator','compiler.py',166),
  ('operator -> MINUS','operator',1,'p_operator','compiler.py',167),
  ('operator -> INT_DIV','operator',1,'p_operator','compiler.py',168),
  ('operator -> DIVIDE','operator',1,'p_operator','compiler.py',169),
  ('operator -> EXP','operator',1,'p_operator','compiler.py',170),
  ('operator -> MULTIPLY','operator',1,'p_operator','compiler.py',171),
  ('expression -> OPERA OPEN_P operator COMMA expression COMMA expression CLOSE_P','expression',8,'p_expression_opera','compiler.py',177),
  ('bool_operator -> EQUALS_EQUALS','bool_operator',1,'p_bool_operator','compiler.py',183),
  ('bool_operator -> DISTINCT','bool_operator',1,'p_bool_operator','compiler.py',184),
  ('bool_operator -> LESS_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',185),
  ('bool_operator -> MORE_EQUAL','bool_operator',1,'p_bool_operator','compiler.py',186),
  ('bool_operator -> MORE_THAN','bool_operator',1,'p_bool_operator','compiler.py',187),
  ('bool_operator -> LESS_THAN','bool_operator',1,'p_bool_operator','compiler.py',188),
  ('expression -> expression bool_operator expression','expression',3,'p_expression_bool','compiler.py',195),
  ('var_assign -> LET VARIABLE EQUALS expression','var_assign',4,'p_var_assign','compiler.py',201),
  ('for_loop -> FOR INT IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',209),
  ('for_loop -> FOR VARIABLE IN INT dDOT INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',210),
  ('for_loop -> FOR INT IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',211),
  ('for_loop -> FOR VARIABLE IN INT dDOT_E INT SB1 algorithm SB2','for_loop',9,'p_for_loop','compiler.py',212),
  ('if_else -> IF expression SB1 statement SB2','if_else',5,'p_if_else','compiler.py',219),
  ('statement -> statement statement_line','statement',2,'p_statement','compiler.py',226),
  ('statement -> empty','statement',1,'p_statement','compiler.py',227),
  ('statement_line -> if_else','statement_line',1,'p_statement_line','compiler.py',235),
  ('statement_line -> expression PyC','statement_line',2,'p_statement_line','compiler.py',236),
  ('statement_line -> var_assign PyC','statement_line',2,'p_statement_line','compiler.py',237),
  ('statement_line -> for_loop PyC','statement_line',2,'p_statement_line','compiler.py',238),
  ('statement_line -> while_loop PyC','statement_line',2,'p_statement_line','compiler.py',239),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',245),
  ('while_loop -> WHILE OPEN_P VARIABLE DISTINCT VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',246),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',247),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_EQUAL VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',248),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_THAN INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',249),
  ('while_loop -> WHILE OPEN_P VARIABLE LESS_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',250),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',251),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_EQUAL VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',252),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_THAN INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',253),
  ('while_loop -> WHILE OPEN_P VARIABLE MORE_THAN VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',254),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',255),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS_EQUALS VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',256),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS INT CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',257),
  ('while_loop -> WHILE OPEN_P VARIABLE EQUALS VARIABLE CLOSE_P SB1 expression SB2','while_loop',9,'p_while_loop','compiler.py',258),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',264),
  ('expression -> INT','expression',1,'p_expression_int_boolean','compiler.py',271),
  ('expression -> BOOLEAN','expression',1,'p_expression_int_boolean','compiler.py',272),
  ('expression -> VARIABLE','expression',1,'p_expression_var','compiler.py',279),
]
